
PLL3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00001624  0800013c  0800013c  0001013c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000034  08001760  08001760  00011760  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  08001794  08001794  00011794  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  08001798  08001798  00011798  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  20000000  0800179c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000000b8  20000010  080017ac  00020010  2**2
                  ALLOC
  7 ._user_heap_stack 00000600  200000c8  080017ac  000200c8  2**0
                  ALLOC
  8 .ARM.attributes 00000029  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .debug_info   0000fcfd  00000000  00000000  00020039  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000023dd  00000000  00000000  0002fd36  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000032ee  00000000  00000000  00032113  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 000005d0  00000000  00000000  00035408  2**3
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000948  00000000  00000000  000359d8  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0000458f  00000000  00000000  00036320  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    000023a4  00000000  00000000  0003a8af  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .comment      0000007c  00000000  00000000  0003cc53  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00000e64  00000000  00000000  0003ccd0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	; (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	; (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	; (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	20000010 	.word	0x20000010
 8000158:	00000000 	.word	0x00000000
 800015c:	08001748 	.word	0x08001748

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	; (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	; (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	; (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000014 	.word	0x20000014
 8000178:	08001748 	.word	0x08001748

0800017c <HAL_InitTick>:
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock /1000);
 800017c:	4b08      	ldr	r3, [pc, #32]	; (80001a0 <HAL_InitTick+0x24>)
{
 800017e:	b510      	push	{r4, lr}
 8000180:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock /1000);
 8000182:	6818      	ldr	r0, [r3, #0]
 8000184:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000188:	fbb0 f0f3 	udiv	r0, r0, r3
 800018c:	f000 f878 	bl	8000280 <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 8000190:	2200      	movs	r2, #0
 8000192:	4621      	mov	r1, r4
 8000194:	f04f 30ff 	mov.w	r0, #4294967295
 8000198:	f000 f83e 	bl	8000218 <HAL_NVIC_SetPriority>

   /* Return function status */
  return HAL_OK;
}
 800019c:	2000      	movs	r0, #0
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c

080001a4 <HAL_Init>:
{
 80001a4:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80001a6:	2003      	movs	r0, #3
 80001a8:	f000 f824 	bl	80001f4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 80001ac:	2000      	movs	r0, #0
 80001ae:	f7ff ffe5 	bl	800017c <HAL_InitTick>
  HAL_MspInit();
 80001b2:	f001 f9d3 	bl	800155c <HAL_MspInit>
}
 80001b6:	2000      	movs	r0, #0
 80001b8:	bd08      	pop	{r3, pc}
	...

080001bc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 80001bc:	4a02      	ldr	r2, [pc, #8]	; (80001c8 <HAL_IncTick+0xc>)
 80001be:	6813      	ldr	r3, [r2, #0]
 80001c0:	3301      	adds	r3, #1
 80001c2:	6013      	str	r3, [r2, #0]
 80001c4:	4770      	bx	lr
 80001c6:	bf00      	nop
 80001c8:	2000002c 	.word	0x2000002c

080001cc <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80001cc:	4b01      	ldr	r3, [pc, #4]	; (80001d4 <HAL_GetTick+0x8>)
 80001ce:	6818      	ldr	r0, [r3, #0]
}
 80001d0:	4770      	bx	lr
 80001d2:	bf00      	nop
 80001d4:	2000002c 	.word	0x2000002c

080001d8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay: specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(__IO uint32_t Delay)
{
 80001d8:	b513      	push	{r0, r1, r4, lr}
 80001da:	9001      	str	r0, [sp, #4]
  uint32_t tickstart = 0;
  tickstart = HAL_GetTick();
 80001dc:	f7ff fff6 	bl	80001cc <HAL_GetTick>
 80001e0:	4604      	mov	r4, r0
  while((HAL_GetTick() - tickstart) < Delay)
 80001e2:	f7ff fff3 	bl	80001cc <HAL_GetTick>
 80001e6:	9b01      	ldr	r3, [sp, #4]
 80001e8:	1b00      	subs	r0, r0, r4
 80001ea:	4298      	cmp	r0, r3
 80001ec:	d3f9      	bcc.n	80001e2 <HAL_Delay+0xa>
  {
  }
}
 80001ee:	b002      	add	sp, #8
 80001f0:	bd10      	pop	{r4, pc}
	...

080001f4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80001f4:	4a07      	ldr	r2, [pc, #28]	; (8000214 <HAL_NVIC_SetPriorityGrouping+0x20>)
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80001f6:	0200      	lsls	r0, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80001f8:	68d3      	ldr	r3, [r2, #12]
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 80001fa:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80001fe:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000202:	041b      	lsls	r3, r3, #16
 8000204:	0c1b      	lsrs	r3, r3, #16
 8000206:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800020a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 800020e:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000210:	60d3      	str	r3, [r2, #12]
 8000212:	4770      	bx	lr
 8000214:	e000ed00 	.word	0xe000ed00

08000218 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000218:	4b17      	ldr	r3, [pc, #92]	; (8000278 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800021a:	b530      	push	{r4, r5, lr}
 800021c:	68dc      	ldr	r4, [r3, #12]
 800021e:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000222:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000226:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000228:	2b04      	cmp	r3, #4
 800022a:	bf28      	it	cs
 800022c:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800022e:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000230:	f04f 0501 	mov.w	r5, #1
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000234:	bf98      	it	ls
 8000236:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000238:	fa05 f303 	lsl.w	r3, r5, r3
 800023c:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000240:	bf88      	it	hi
 8000242:	3c03      	subhi	r4, #3
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000244:	4019      	ands	r1, r3
 8000246:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000248:	fa05 f404 	lsl.w	r4, r5, r4
 800024c:	3c01      	subs	r4, #1
 800024e:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000250:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000252:	ea42 0201 	orr.w	r2, r2, r1
 8000256:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800025a:	bfaf      	iteee	ge
 800025c:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000260:	4b06      	ldrlt	r3, [pc, #24]	; (800027c <HAL_NVIC_SetPriority+0x64>)
 8000262:	f000 000f 	andlt.w	r0, r0, #15
 8000266:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000268:	bfa5      	ittet	ge
 800026a:	b2d2      	uxtbge	r2, r2
 800026c:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000270:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000272:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8000276:	bd30      	pop	{r4, r5, pc}
 8000278:	e000ed00 	.word	0xe000ed00
 800027c:	e000ed14 	.word	0xe000ed14

08000280 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000280:	3801      	subs	r0, #1
 8000282:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000286:	d20a      	bcs.n	800029e <HAL_SYSTICK_Config+0x1e>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000288:	21f0      	movs	r1, #240	; 0xf0
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800028a:	4b06      	ldr	r3, [pc, #24]	; (80002a4 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800028c:	4a06      	ldr	r2, [pc, #24]	; (80002a8 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800028e:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000290:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000294:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000296:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000298:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800029a:	601a      	str	r2, [r3, #0]
 800029c:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800029e:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80002a0:	4770      	bx	lr
 80002a2:	bf00      	nop
 80002a4:	e000e010 	.word	0xe000e010
 80002a8:	e000ed00 	.word	0xe000ed00

080002ac <HAL_GPIO_Init>:
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{ 
  uint32_t position = 0x00;
 80002ac:	2300      	movs	r3, #0
{ 
 80002ae:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull)); 

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 80002b2:	f8d1 8000 	ldr.w	r8, [r1]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80002b6:	f8df 9194 	ldr.w	r9, [pc, #404]	; 800044c <HAL_GPIO_Init+0x1a0>
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;
                  
        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80002ba:	4a62      	ldr	r2, [pc, #392]	; (8000444 <HAL_GPIO_Init+0x198>)
  while (((GPIO_Init->Pin) >> position) != 0)
 80002bc:	fa38 f403 	lsrs.w	r4, r8, r3
 80002c0:	d102      	bne.n	80002c8 <HAL_GPIO_Init+0x1c>
      }
    }
    
    position++;
  } 
}
 80002c2:	b003      	add	sp, #12
 80002c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 80002c8:	f04f 0e01 	mov.w	lr, #1
 80002cc:	fa0e fe03 	lsl.w	lr, lr, r3
    if(iocurrent)
 80002d0:	ea18 060e 	ands.w	r6, r8, lr
 80002d4:	f000 80a8 	beq.w	8000428 <HAL_GPIO_Init+0x17c>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD)) 
 80002d8:	684c      	ldr	r4, [r1, #4]
 80002da:	f024 0710 	bic.w	r7, r4, #16
 80002de:	2f02      	cmp	r7, #2
 80002e0:	d116      	bne.n	8000310 <HAL_GPIO_Init+0x64>
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 80002e2:	f04f 0c0f 	mov.w	ip, #15
        temp = GPIOx->AFR[position >> 3];
 80002e6:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 80002ea:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 80002ee:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3];
 80002f2:	f8da 5020 	ldr.w	r5, [sl, #32]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4)) ;      
 80002f6:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80002fa:	fa0c fc0b 	lsl.w	ip, ip, fp
 80002fe:	ea25 0c0c 	bic.w	ip, r5, ip
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));       
 8000302:	690d      	ldr	r5, [r1, #16]
 8000304:	fa05 f50b 	lsl.w	r5, r5, fp
 8000308:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3] = temp;
 800030c:	f8ca 5020 	str.w	r5, [sl, #32]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 8000310:	2503      	movs	r5, #3
 8000312:	ea4f 0a43 	mov.w	sl, r3, lsl #1
 8000316:	fa05 f50a 	lsl.w	r5, r5, sl
 800031a:	43ed      	mvns	r5, r5
      temp = GPIOx->MODER;
 800031c:	f8d0 b000 	ldr.w	fp, [r0]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000320:	f004 0c03 	and.w	ip, r4, #3
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));   
 8000324:	ea0b 0b05 	and.w	fp, fp, r5
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000328:	fa0c fc0a 	lsl.w	ip, ip, sl
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800032c:	3f01      	subs	r7, #1
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800032e:	ea4c 0c0b 	orr.w	ip, ip, fp
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000332:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 8000334:	f8c0 c000 	str.w	ip, [r0]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000338:	d811      	bhi.n	800035e <HAL_GPIO_Init+0xb2>
        temp = GPIOx->OSPEEDR; 
 800033a:	6887      	ldr	r7, [r0, #8]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800033c:	ea07 0b05 	and.w	fp, r7, r5
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8000340:	68cf      	ldr	r7, [r1, #12]
 8000342:	fa07 fc0a 	lsl.w	ip, r7, sl
 8000346:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 800034a:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800034c:	6847      	ldr	r7, [r0, #4]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 800034e:	ea27 0e0e 	bic.w	lr, r7, lr
        SET_BIT(temp, ((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000352:	f3c4 1700 	ubfx	r7, r4, #4, #1
 8000356:	409f      	lsls	r7, r3
 8000358:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 800035c:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 800035e:	68c7      	ldr	r7, [r0, #12]
      CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8000360:	403d      	ands	r5, r7
      SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8000362:	688f      	ldr	r7, [r1, #8]
 8000364:	fa07 f70a 	lsl.w	r7, r7, sl
 8000368:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 800036a:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE) 
 800036c:	00e5      	lsls	r5, r4, #3
 800036e:	d55b      	bpl.n	8000428 <HAL_GPIO_Init+0x17c>
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8000370:	f04f 0c0f 	mov.w	ip, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000374:	f8d9 5020 	ldr.w	r5, [r9, #32]
 8000378:	f023 0703 	bic.w	r7, r3, #3
 800037c:	f045 0501 	orr.w	r5, r5, #1
 8000380:	f8c9 5020 	str.w	r5, [r9, #32]
 8000384:	f8d9 5020 	ldr.w	r5, [r9, #32]
 8000388:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 800038c:	f005 0501 	and.w	r5, r5, #1
 8000390:	9501      	str	r5, [sp, #4]
 8000392:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8000396:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800039a:	9d01      	ldr	r5, [sp, #4]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 800039c:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
        temp = SYSCFG->EXTICR[position >> 2];
 80003a0:	f8d7 a008 	ldr.w	sl, [r7, #8]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 80003a4:	fa0c f50e 	lsl.w	r5, ip, lr
 80003a8:	ea2a 0c05 	bic.w	ip, sl, r5
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80003ac:	4d26      	ldr	r5, [pc, #152]	; (8000448 <HAL_GPIO_Init+0x19c>)
 80003ae:	42a8      	cmp	r0, r5
 80003b0:	d03c      	beq.n	800042c <HAL_GPIO_Init+0x180>
 80003b2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80003b6:	42a8      	cmp	r0, r5
 80003b8:	d03a      	beq.n	8000430 <HAL_GPIO_Init+0x184>
 80003ba:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80003be:	42a8      	cmp	r0, r5
 80003c0:	d038      	beq.n	8000434 <HAL_GPIO_Init+0x188>
 80003c2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80003c6:	42a8      	cmp	r0, r5
 80003c8:	d036      	beq.n	8000438 <HAL_GPIO_Init+0x18c>
 80003ca:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80003ce:	42a8      	cmp	r0, r5
 80003d0:	d034      	beq.n	800043c <HAL_GPIO_Init+0x190>
 80003d2:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80003d6:	42a8      	cmp	r0, r5
 80003d8:	d032      	beq.n	8000440 <HAL_GPIO_Init+0x194>
 80003da:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80003de:	42a8      	cmp	r0, r5
 80003e0:	bf14      	ite	ne
 80003e2:	2507      	movne	r5, #7
 80003e4:	2506      	moveq	r5, #6
 80003e6:	fa05 f50e 	lsl.w	r5, r5, lr
 80003ea:	ea45 050c 	orr.w	r5, r5, ip
        SYSCFG->EXTICR[position >> 2] = temp;
 80003ee:	60bd      	str	r5, [r7, #8]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80003f0:	43f7      	mvns	r7, r6
        temp = EXTI->IMR;
 80003f2:	6815      	ldr	r5, [r2, #0]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80003f4:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80003f8:	bf0c      	ite	eq
 80003fa:	403d      	andeq	r5, r7
          SET_BIT(temp, iocurrent); 
 80003fc:	4335      	orrne	r5, r6
        EXTI->IMR = temp;
 80003fe:	6015      	str	r5, [r2, #0]
        temp = EXTI->EMR;
 8000400:	6855      	ldr	r5, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000402:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        CLEAR_BIT(temp, (uint32_t)iocurrent);      
 8000406:	bf0c      	ite	eq
 8000408:	403d      	andeq	r5, r7
          SET_BIT(temp, iocurrent); 
 800040a:	4335      	orrne	r5, r6
        EXTI->EMR = temp;
 800040c:	6055      	str	r5, [r2, #4]
        temp = EXTI->RTSR;
 800040e:	6895      	ldr	r5, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000410:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8000414:	bf0c      	ite	eq
 8000416:	403d      	andeq	r5, r7
          SET_BIT(temp, iocurrent); 
 8000418:	4335      	orrne	r5, r6
        EXTI->RTSR = temp;
 800041a:	6095      	str	r5, [r2, #8]
        temp = EXTI->FTSR;
 800041c:	68d5      	ldr	r5, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800041e:	02a4      	lsls	r4, r4, #10
        CLEAR_BIT(temp, (uint32_t)iocurrent); 
 8000420:	bf54      	ite	pl
 8000422:	403d      	andpl	r5, r7
          SET_BIT(temp, iocurrent); 
 8000424:	4335      	orrmi	r5, r6
        EXTI->FTSR = temp;
 8000426:	60d5      	str	r5, [r2, #12]
    position++;
 8000428:	3301      	adds	r3, #1
 800042a:	e747      	b.n	80002bc <HAL_GPIO_Init+0x10>
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800042c:	2500      	movs	r5, #0
 800042e:	e7da      	b.n	80003e6 <HAL_GPIO_Init+0x13a>
 8000430:	2501      	movs	r5, #1
 8000432:	e7d8      	b.n	80003e6 <HAL_GPIO_Init+0x13a>
 8000434:	2502      	movs	r5, #2
 8000436:	e7d6      	b.n	80003e6 <HAL_GPIO_Init+0x13a>
 8000438:	2503      	movs	r5, #3
 800043a:	e7d4      	b.n	80003e6 <HAL_GPIO_Init+0x13a>
 800043c:	2504      	movs	r5, #4
 800043e:	e7d2      	b.n	80003e6 <HAL_GPIO_Init+0x13a>
 8000440:	2505      	movs	r5, #5
 8000442:	e7d0      	b.n	80003e6 <HAL_GPIO_Init+0x13a>
 8000444:	40010400 	.word	0x40010400
 8000448:	40020000 	.word	0x40020000
 800044c:	40023800 	.word	0x40023800

08000450 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000450:	b10a      	cbz	r2, 8000456 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8000452:	6181      	str	r1, [r0, #24]
 8000454:	4770      	bx	lr
 8000456:	0409      	lsls	r1, r1, #16
 8000458:	e7fb      	b.n	8000452 <HAL_GPIO_WritePin+0x2>
	...

0800045c <RCC_SetFlashLatencyFromMSIRange>:
{
  uint32_t vos = 0U;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 800045c:	4b1c      	ldr	r3, [pc, #112]	; (80004d0 <RCC_SetFlashLatencyFromMSIRange+0x74>)
{
 800045e:	b082      	sub	sp, #8
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8000460:	689a      	ldr	r2, [r3, #8]
 8000462:	f012 0ff0 	tst.w	r2, #240	; 0xf0
 8000466:	d00c      	beq.n	8000482 <RCC_SetFlashLatencyFromMSIRange+0x26>
{
 8000468:	2200      	movs	r2, #0
    {
      latency = FLASH_LATENCY_1; /* 1WS */
    }
  }
  
  __HAL_FLASH_SET_LATENCY(latency);
 800046a:	491a      	ldr	r1, [pc, #104]	; (80004d4 <RCC_SetFlashLatencyFromMSIRange+0x78>)
 800046c:	680b      	ldr	r3, [r1, #0]
 800046e:	f023 0301 	bic.w	r3, r3, #1
 8000472:	4313      	orrs	r3, r2
 8000474:	600b      	str	r3, [r1, #0]
  
  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if((FLASH->ACR & FLASH_ACR_LATENCY) != latency)
 8000476:	6808      	ldr	r0, [r1, #0]
 8000478:	f000 0001 	and.w	r0, r0, #1
 800047c:	4050      	eors	r0, r2
  {
    return HAL_ERROR;
  }
  
  return HAL_OK;
}
 800047e:	b002      	add	sp, #8
 8000480:	4770      	bx	lr
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8000482:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000484:	4914      	ldr	r1, [pc, #80]	; (80004d8 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 8000486:	f012 5f80 	tst.w	r2, #268435456	; 0x10000000
 800048a:	d00f      	beq.n	80004ac <RCC_SetFlashLatencyFromMSIRange+0x50>
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 800048c:	680a      	ldr	r2, [r1, #0]
 800048e:	f402 52c0 	and.w	r2, r2, #6144	; 0x1800
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8000492:	f5b2 5fc0 	cmp.w	r2, #6144	; 0x1800
 8000496:	d1e7      	bne.n	8000468 <RCC_SetFlashLatencyFromMSIRange+0xc>
 8000498:	f5b0 4f40 	cmp.w	r0, #49152	; 0xc000
 800049c:	d1e4      	bne.n	8000468 <RCC_SetFlashLatencyFromMSIRange+0xc>
  __HAL_FLASH_SET_LATENCY(latency);
 800049e:	4a0d      	ldr	r2, [pc, #52]	; (80004d4 <RCC_SetFlashLatencyFromMSIRange+0x78>)
 80004a0:	6813      	ldr	r3, [r2, #0]
 80004a2:	f043 0304 	orr.w	r3, r3, #4
 80004a6:	6013      	str	r3, [r2, #0]
      latency = FLASH_LATENCY_1; /* 1WS */
 80004a8:	2201      	movs	r2, #1
 80004aa:	e7de      	b.n	800046a <RCC_SetFlashLatencyFromMSIRange+0xe>
      __HAL_RCC_PWR_CLK_ENABLE();
 80004ac:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80004ae:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80004b2:	625a      	str	r2, [r3, #36]	; 0x24
 80004b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80004b6:	f002 5280 	and.w	r2, r2, #268435456	; 0x10000000
 80004ba:	9201      	str	r2, [sp, #4]
 80004bc:	9a01      	ldr	r2, [sp, #4]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80004be:	680a      	ldr	r2, [r1, #0]
      __HAL_RCC_PWR_CLK_DISABLE();
 80004c0:	6a59      	ldr	r1, [r3, #36]	; 0x24
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 80004c2:	f402 52c0 	and.w	r2, r2, #6144	; 0x1800
      __HAL_RCC_PWR_CLK_DISABLE();
 80004c6:	f021 5180 	bic.w	r1, r1, #268435456	; 0x10000000
 80004ca:	6259      	str	r1, [r3, #36]	; 0x24
 80004cc:	e7e1      	b.n	8000492 <RCC_SetFlashLatencyFromMSIRange+0x36>
 80004ce:	bf00      	nop
 80004d0:	40023800 	.word	0x40023800
 80004d4:	40023c00 	.word	0x40023c00
 80004d8:	40007000 	.word	0x40007000

080004dc <HAL_RCC_OscConfig>:
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80004dc:	6803      	ldr	r3, [r0, #0]
{
 80004de:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80004e2:	07d9      	lsls	r1, r3, #31
{
 80004e4:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80004e6:	d46a      	bmi.n	80005be <HAL_RCC_OscConfig+0xe2>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80004e8:	6823      	ldr	r3, [r4, #0]
 80004ea:	079a      	lsls	r2, r3, #30
 80004ec:	f100 80e6 	bmi.w	80006bc <HAL_RCC_OscConfig+0x1e0>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80004f0:	6823      	ldr	r3, [r4, #0]
 80004f2:	06de      	lsls	r6, r3, #27
 80004f4:	d555      	bpl.n	80005a2 <HAL_RCC_OscConfig+0xc6>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) )
 80004f6:	4dc1      	ldr	r5, [pc, #772]	; (80007fc <HAL_RCC_OscConfig+0x320>)
 80004f8:	68ab      	ldr	r3, [r5, #8]
 80004fa:	f013 0f0c 	tst.w	r3, #12
 80004fe:	f040 8183 	bne.w	8000808 <HAL_RCC_OscConfig+0x32c>
__attribute__((always_inline)) __STATIC_INLINE uint32_t __RBIT(uint32_t value)
{
  uint32_t result;

#if       (__CORTEX_M >= 0x03U) || (__CORTEX_SC >= 300U)
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000502:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000506:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != RESET) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800050a:	6829      	ldr	r1, [r5, #0]
 800050c:	fa93 f3a3 	rbit	r3, r3
 8000510:	fab3 f383 	clz	r3, r3
 8000514:	2201      	movs	r2, #1
 8000516:	f003 031f 	and.w	r3, r3, #31
 800051a:	fa02 f303 	lsl.w	r3, r2, r3
 800051e:	420b      	tst	r3, r1
 8000520:	d002      	beq.n	8000528 <HAL_RCC_OscConfig+0x4c>
 8000522:	69a3      	ldr	r3, [r4, #24]
 8000524:	2b00      	cmp	r3, #0
 8000526:	d06e      	beq.n	8000606 <HAL_RCC_OscConfig+0x12a>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000528:	4db4      	ldr	r5, [pc, #720]	; (80007fc <HAL_RCC_OscConfig+0x320>)
 800052a:	6a20      	ldr	r0, [r4, #32]
 800052c:	686b      	ldr	r3, [r5, #4]
 800052e:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8000532:	4298      	cmp	r0, r3
 8000534:	f240 814a 	bls.w	80007cc <HAL_RCC_OscConfig+0x2f0>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000538:	f7ff ff90 	bl	800045c <RCC_SetFlashLatencyFromMSIRange>
 800053c:	2800      	cmp	r0, #0
 800053e:	d162      	bne.n	8000606 <HAL_RCC_OscConfig+0x12a>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000540:	686b      	ldr	r3, [r5, #4]
 8000542:	6a22      	ldr	r2, [r4, #32]
 8000544:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000548:	4313      	orrs	r3, r2
 800054a:	606b      	str	r3, [r5, #4]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800054c:	6869      	ldr	r1, [r5, #4]
 800054e:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 8000552:	fa93 f3a3 	rbit	r3, r3
 8000556:	fab3 f283 	clz	r2, r3
 800055a:	69e3      	ldr	r3, [r4, #28]
 800055c:	4093      	lsls	r3, r2
 800055e:	f021 427f 	bic.w	r2, r1, #4278190080	; 0xff000000
 8000562:	4313      	orrs	r3, r2
 8000564:	606b      	str	r3, [r5, #4]
 8000566:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 800056a:	fa93 f3a3 	rbit	r3, r3
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 800056e:	fab3 f083 	clz	r0, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 8000572:	4ba2      	ldr	r3, [pc, #648]	; (80007fc <HAL_RCC_OscConfig+0x320>)
 8000574:	21f0      	movs	r1, #240	; 0xf0
 8000576:	689a      	ldr	r2, [r3, #8]
 8000578:	fa91 f1a1 	rbit	r1, r1
 800057c:	fab1 f181 	clz	r1, r1
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 8000580:	6a23      	ldr	r3, [r4, #32]
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 8000582:	f002 02f0 	and.w	r2, r2, #240	; 0xf0
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 8000586:	40c3      	lsrs	r3, r0
 8000588:	1c58      	adds	r0, r3, #1
 800058a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 800058e:	40ca      	lsrs	r2, r1
 8000590:	499b      	ldr	r1, [pc, #620]	; (8000800 <HAL_RCC_OscConfig+0x324>)
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 8000592:	4083      	lsls	r3, r0
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 8000594:	5c8a      	ldrb	r2, [r1, r2]
        HAL_InitTick (TICK_INT_PRIORITY);
 8000596:	2000      	movs	r0, #0
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_BITNUMBER)];
 8000598:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1U << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_BITNUMBER) + 1U))) 
 800059a:	4a9a      	ldr	r2, [pc, #616]	; (8000804 <HAL_RCC_OscConfig+0x328>)
 800059c:	6013      	str	r3, [r2, #0]
        HAL_InitTick (TICK_INT_PRIORITY);
 800059e:	f7ff fded 	bl	800017c <HAL_InitTick>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80005a2:	6823      	ldr	r3, [r4, #0]
 80005a4:	071d      	lsls	r5, r3, #28
 80005a6:	f100 8191 	bmi.w	80008cc <HAL_RCC_OscConfig+0x3f0>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80005aa:	6823      	ldr	r3, [r4, #0]
 80005ac:	0758      	lsls	r0, r3, #29
 80005ae:	f100 81d3 	bmi.w	8000958 <HAL_RCC_OscConfig+0x47c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80005b2:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80005b4:	2a00      	cmp	r2, #0
 80005b6:	f040 8257 	bne.w	8000a68 <HAL_RCC_OscConfig+0x58c>
  return HAL_OK;
 80005ba:	2000      	movs	r0, #0
 80005bc:	e024      	b.n	8000608 <HAL_RCC_OscConfig+0x12c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80005be:	4b8f      	ldr	r3, [pc, #572]	; (80007fc <HAL_RCC_OscConfig+0x320>)
 80005c0:	689a      	ldr	r2, [r3, #8]
 80005c2:	f002 020c 	and.w	r2, r2, #12
 80005c6:	2a08      	cmp	r2, #8
 80005c8:	d007      	beq.n	80005da <HAL_RCC_OscConfig+0xfe>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80005ca:	689a      	ldr	r2, [r3, #8]
 80005cc:	f002 020c 	and.w	r2, r2, #12
 80005d0:	2a0c      	cmp	r2, #12
 80005d2:	d11c      	bne.n	800060e <HAL_RCC_OscConfig+0x132>
 80005d4:	689b      	ldr	r3, [r3, #8]
 80005d6:	03db      	lsls	r3, r3, #15
 80005d8:	d519      	bpl.n	800060e <HAL_RCC_OscConfig+0x132>
 80005da:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80005de:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80005e2:	4a86      	ldr	r2, [pc, #536]	; (80007fc <HAL_RCC_OscConfig+0x320>)
 80005e4:	6811      	ldr	r1, [r2, #0]
 80005e6:	fa93 f3a3 	rbit	r3, r3
 80005ea:	fab3 f383 	clz	r3, r3
 80005ee:	2201      	movs	r2, #1
 80005f0:	f003 031f 	and.w	r3, r3, #31
 80005f4:	fa02 f303 	lsl.w	r3, r2, r3
 80005f8:	420b      	tst	r3, r1
 80005fa:	f43f af75 	beq.w	80004e8 <HAL_RCC_OscConfig+0xc>
 80005fe:	6863      	ldr	r3, [r4, #4]
 8000600:	2b00      	cmp	r3, #0
 8000602:	f47f af71 	bne.w	80004e8 <HAL_RCC_OscConfig+0xc>
        return HAL_ERROR;
 8000606:	2001      	movs	r0, #1
}
 8000608:	b003      	add	sp, #12
 800060a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800060e:	6863      	ldr	r3, [r4, #4]
 8000610:	4d7a      	ldr	r5, [pc, #488]	; (80007fc <HAL_RCC_OscConfig+0x320>)
 8000612:	2b01      	cmp	r3, #1
 8000614:	d120      	bne.n	8000658 <HAL_RCC_OscConfig+0x17c>
 8000616:	682b      	ldr	r3, [r5, #0]
 8000618:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800061c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800061e:	f7ff fdd5 	bl	80001cc <HAL_GetTick>
 8000622:	f44f 3500 	mov.w	r5, #131072	; 0x20000
 8000626:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000628:	2601      	movs	r6, #1
 800062a:	4f74      	ldr	r7, [pc, #464]	; (80007fc <HAL_RCC_OscConfig+0x320>)
 800062c:	fa95 f3a5 	rbit	r3, r5
 8000630:	683a      	ldr	r2, [r7, #0]
 8000632:	fa95 f3a5 	rbit	r3, r5
 8000636:	fab3 f383 	clz	r3, r3
 800063a:	f003 031f 	and.w	r3, r3, #31
 800063e:	fa06 f303 	lsl.w	r3, r6, r3
 8000642:	4213      	tst	r3, r2
 8000644:	f47f af50 	bne.w	80004e8 <HAL_RCC_OscConfig+0xc>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000648:	f7ff fdc0 	bl	80001cc <HAL_GetTick>
 800064c:	eba0 0008 	sub.w	r0, r0, r8
 8000650:	2864      	cmp	r0, #100	; 0x64
 8000652:	d9eb      	bls.n	800062c <HAL_RCC_OscConfig+0x150>
            return HAL_TIMEOUT;
 8000654:	2003      	movs	r0, #3
 8000656:	e7d7      	b.n	8000608 <HAL_RCC_OscConfig+0x12c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000658:	bb13      	cbnz	r3, 80006a0 <HAL_RCC_OscConfig+0x1c4>
 800065a:	682b      	ldr	r3, [r5, #0]
 800065c:	f44f 3600 	mov.w	r6, #131072	; 0x20000
 8000660:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000664:	602b      	str	r3, [r5, #0]
 8000666:	682b      	ldr	r3, [r5, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000668:	2701      	movs	r7, #1
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800066a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800066e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8000670:	f7ff fdac 	bl	80001cc <HAL_GetTick>
 8000674:	4680      	mov	r8, r0
 8000676:	fa96 f3a6 	rbit	r3, r6
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800067a:	682a      	ldr	r2, [r5, #0]
 800067c:	fa96 f3a6 	rbit	r3, r6
 8000680:	fab3 f383 	clz	r3, r3
 8000684:	f003 031f 	and.w	r3, r3, #31
 8000688:	fa07 f303 	lsl.w	r3, r7, r3
 800068c:	4213      	tst	r3, r2
 800068e:	f43f af2b 	beq.w	80004e8 <HAL_RCC_OscConfig+0xc>
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000692:	f7ff fd9b 	bl	80001cc <HAL_GetTick>
 8000696:	eba0 0008 	sub.w	r0, r0, r8
 800069a:	2864      	cmp	r0, #100	; 0x64
 800069c:	d9eb      	bls.n	8000676 <HAL_RCC_OscConfig+0x19a>
 800069e:	e7d9      	b.n	8000654 <HAL_RCC_OscConfig+0x178>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80006a0:	2b05      	cmp	r3, #5
 80006a2:	682b      	ldr	r3, [r5, #0]
 80006a4:	d103      	bne.n	80006ae <HAL_RCC_OscConfig+0x1d2>
 80006a6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80006aa:	602b      	str	r3, [r5, #0]
 80006ac:	e7b3      	b.n	8000616 <HAL_RCC_OscConfig+0x13a>
 80006ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80006b2:	602b      	str	r3, [r5, #0]
 80006b4:	682b      	ldr	r3, [r5, #0]
 80006b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80006ba:	e7af      	b.n	800061c <HAL_RCC_OscConfig+0x140>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80006bc:	4b4f      	ldr	r3, [pc, #316]	; (80007fc <HAL_RCC_OscConfig+0x320>)
 80006be:	689a      	ldr	r2, [r3, #8]
 80006c0:	f002 020c 	and.w	r2, r2, #12
 80006c4:	2a04      	cmp	r2, #4
 80006c6:	d007      	beq.n	80006d8 <HAL_RCC_OscConfig+0x1fc>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80006c8:	689a      	ldr	r2, [r3, #8]
 80006ca:	f002 020c 	and.w	r2, r2, #12
 80006ce:	2a0c      	cmp	r2, #12
 80006d0:	d124      	bne.n	800071c <HAL_RCC_OscConfig+0x240>
 80006d2:	689b      	ldr	r3, [r3, #8]
 80006d4:	03df      	lsls	r7, r3, #15
 80006d6:	d421      	bmi.n	800071c <HAL_RCC_OscConfig+0x240>
 80006d8:	2302      	movs	r3, #2
 80006da:	fa93 f2a3 	rbit	r2, r3
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80006de:	4a47      	ldr	r2, [pc, #284]	; (80007fc <HAL_RCC_OscConfig+0x320>)
 80006e0:	6810      	ldr	r0, [r2, #0]
 80006e2:	fa93 f3a3 	rbit	r3, r3
 80006e6:	fab3 f383 	clz	r3, r3
 80006ea:	2101      	movs	r1, #1
 80006ec:	f003 031f 	and.w	r3, r3, #31
 80006f0:	fa01 f303 	lsl.w	r3, r1, r3
 80006f4:	4203      	tst	r3, r0
 80006f6:	4613      	mov	r3, r2
 80006f8:	d002      	beq.n	8000700 <HAL_RCC_OscConfig+0x224>
 80006fa:	68e2      	ldr	r2, [r4, #12]
 80006fc:	428a      	cmp	r2, r1
 80006fe:	d182      	bne.n	8000606 <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000700:	6858      	ldr	r0, [r3, #4]
 8000702:	f44f 52f8 	mov.w	r2, #7936	; 0x1f00
 8000706:	fa92 f2a2 	rbit	r2, r2
 800070a:	fab2 f182 	clz	r1, r2
 800070e:	6922      	ldr	r2, [r4, #16]
 8000710:	408a      	lsls	r2, r1
 8000712:	f420 51f8 	bic.w	r1, r0, #7936	; 0x1f00
 8000716:	430a      	orrs	r2, r1
 8000718:	605a      	str	r2, [r3, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800071a:	e6e9      	b.n	80004f0 <HAL_RCC_OscConfig+0x14>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800071c:	68e2      	ldr	r2, [r4, #12]
 800071e:	2501      	movs	r5, #1
 8000720:	b382      	cbz	r2, 8000784 <HAL_RCC_OscConfig+0x2a8>
 8000722:	fa95 f3a5 	rbit	r3, r5
        __HAL_RCC_HSI_ENABLE();
 8000726:	fab3 f383 	clz	r3, r3
 800072a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800072e:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 8000732:	009b      	lsls	r3, r3, #2
 8000734:	601d      	str	r5, [r3, #0]
        tickstart = HAL_GetTick();
 8000736:	f7ff fd49 	bl	80001cc <HAL_GetTick>
 800073a:	2702      	movs	r7, #2
 800073c:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800073e:	4e2f      	ldr	r6, [pc, #188]	; (80007fc <HAL_RCC_OscConfig+0x320>)
 8000740:	fa97 f3a7 	rbit	r3, r7
 8000744:	6832      	ldr	r2, [r6, #0]
 8000746:	fa97 f3a7 	rbit	r3, r7
 800074a:	fab3 f383 	clz	r3, r3
 800074e:	f003 031f 	and.w	r3, r3, #31
 8000752:	fa05 f303 	lsl.w	r3, r5, r3
 8000756:	4213      	tst	r3, r2
 8000758:	d00d      	beq.n	8000776 <HAL_RCC_OscConfig+0x29a>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800075a:	6871      	ldr	r1, [r6, #4]
 800075c:	f44f 53f8 	mov.w	r3, #7936	; 0x1f00
 8000760:	fa93 f3a3 	rbit	r3, r3
 8000764:	fab3 f283 	clz	r2, r3
 8000768:	6923      	ldr	r3, [r4, #16]
 800076a:	4093      	lsls	r3, r2
 800076c:	f421 52f8 	bic.w	r2, r1, #7936	; 0x1f00
 8000770:	4313      	orrs	r3, r2
 8000772:	6073      	str	r3, [r6, #4]
 8000774:	e6bc      	b.n	80004f0 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000776:	f7ff fd29 	bl	80001cc <HAL_GetTick>
 800077a:	eba0 0008 	sub.w	r0, r0, r8
 800077e:	2802      	cmp	r0, #2
 8000780:	d9de      	bls.n	8000740 <HAL_RCC_OscConfig+0x264>
 8000782:	e767      	b.n	8000654 <HAL_RCC_OscConfig+0x178>
 8000784:	fa95 f3a5 	rbit	r3, r5
        __HAL_RCC_HSI_DISABLE();
 8000788:	fab3 f383 	clz	r3, r3
 800078c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000790:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 8000794:	009b      	lsls	r3, r3, #2
 8000796:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000798:	f7ff fd18 	bl	80001cc <HAL_GetTick>
 800079c:	2602      	movs	r6, #2
 800079e:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80007a0:	4f16      	ldr	r7, [pc, #88]	; (80007fc <HAL_RCC_OscConfig+0x320>)
 80007a2:	fa96 f3a6 	rbit	r3, r6
 80007a6:	683a      	ldr	r2, [r7, #0]
 80007a8:	fa96 f3a6 	rbit	r3, r6
 80007ac:	fab3 f383 	clz	r3, r3
 80007b0:	f003 031f 	and.w	r3, r3, #31
 80007b4:	fa05 f303 	lsl.w	r3, r5, r3
 80007b8:	4213      	tst	r3, r2
 80007ba:	f43f ae99 	beq.w	80004f0 <HAL_RCC_OscConfig+0x14>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80007be:	f7ff fd05 	bl	80001cc <HAL_GetTick>
 80007c2:	eba0 0008 	sub.w	r0, r0, r8
 80007c6:	2802      	cmp	r0, #2
 80007c8:	d9eb      	bls.n	80007a2 <HAL_RCC_OscConfig+0x2c6>
 80007ca:	e743      	b.n	8000654 <HAL_RCC_OscConfig+0x178>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80007cc:	686b      	ldr	r3, [r5, #4]
 80007ce:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80007d2:	4303      	orrs	r3, r0
 80007d4:	606b      	str	r3, [r5, #4]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80007d6:	6869      	ldr	r1, [r5, #4]
 80007d8:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 80007dc:	fa93 f3a3 	rbit	r3, r3
 80007e0:	fab3 f283 	clz	r2, r3
 80007e4:	69e3      	ldr	r3, [r4, #28]
 80007e6:	4093      	lsls	r3, r2
 80007e8:	f021 427f 	bic.w	r2, r1, #4278190080	; 0xff000000
 80007ec:	4313      	orrs	r3, r2
 80007ee:	606b      	str	r3, [r5, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80007f0:	f7ff fe34 	bl	800045c <RCC_SetFlashLatencyFromMSIRange>
 80007f4:	2800      	cmp	r0, #0
 80007f6:	f43f aeb6 	beq.w	8000566 <HAL_RCC_OscConfig+0x8a>
 80007fa:	e704      	b.n	8000606 <HAL_RCC_OscConfig+0x12a>
 80007fc:	40023800 	.word	0x40023800
 8000800:	08001770 	.word	0x08001770
 8000804:	2000000c 	.word	0x2000000c
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000808:	69a2      	ldr	r2, [r4, #24]
 800080a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800080e:	2a00      	cmp	r2, #0
 8000810:	d037      	beq.n	8000882 <HAL_RCC_OscConfig+0x3a6>
 8000812:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_MSI_ENABLE();
 8000816:	fab3 f383 	clz	r3, r3
 800081a:	2601      	movs	r6, #1
 800081c:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000820:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 8000824:	009b      	lsls	r3, r3, #2
 8000826:	601e      	str	r6, [r3, #0]
        tickstart = HAL_GetTick();
 8000828:	f7ff fcd0 	bl	80001cc <HAL_GetTick>
 800082c:	f44f 7700 	mov.w	r7, #512	; 0x200
 8000830:	4680      	mov	r8, r0
 8000832:	fa97 f3a7 	rbit	r3, r7
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 8000836:	682a      	ldr	r2, [r5, #0]
 8000838:	fa97 f3a7 	rbit	r3, r7
 800083c:	fab3 f383 	clz	r3, r3
 8000840:	f003 031f 	and.w	r3, r3, #31
 8000844:	fa06 f303 	lsl.w	r3, r6, r3
 8000848:	4213      	tst	r3, r2
 800084a:	d013      	beq.n	8000874 <HAL_RCC_OscConfig+0x398>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800084c:	686b      	ldr	r3, [r5, #4]
 800084e:	6a22      	ldr	r2, [r4, #32]
 8000850:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8000854:	4313      	orrs	r3, r2
 8000856:	606b      	str	r3, [r5, #4]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000858:	6869      	ldr	r1, [r5, #4]
 800085a:	f04f 437f 	mov.w	r3, #4278190080	; 0xff000000
 800085e:	fa93 f3a3 	rbit	r3, r3
 8000862:	fab3 f283 	clz	r2, r3
 8000866:	69e3      	ldr	r3, [r4, #28]
 8000868:	4093      	lsls	r3, r2
 800086a:	f021 427f 	bic.w	r2, r1, #4278190080	; 0xff000000
 800086e:	4313      	orrs	r3, r2
 8000870:	606b      	str	r3, [r5, #4]
 8000872:	e696      	b.n	80005a2 <HAL_RCC_OscConfig+0xc6>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000874:	f7ff fcaa 	bl	80001cc <HAL_GetTick>
 8000878:	eba0 0008 	sub.w	r0, r0, r8
 800087c:	2802      	cmp	r0, #2
 800087e:	d9d8      	bls.n	8000832 <HAL_RCC_OscConfig+0x356>
 8000880:	e6e8      	b.n	8000654 <HAL_RCC_OscConfig+0x178>
 8000882:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_MSI_DISABLE();
 8000886:	fab3 f383 	clz	r3, r3
 800088a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800088e:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 8000892:	009b      	lsls	r3, r3, #2
 8000894:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000896:	f7ff fc99 	bl	80001cc <HAL_GetTick>
 800089a:	f44f 7600 	mov.w	r6, #512	; 0x200
 800089e:	4680      	mov	r8, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != RESET)
 80008a0:	2701      	movs	r7, #1
 80008a2:	fa96 f3a6 	rbit	r3, r6
 80008a6:	682a      	ldr	r2, [r5, #0]
 80008a8:	fa96 f3a6 	rbit	r3, r6
 80008ac:	fab3 f383 	clz	r3, r3
 80008b0:	f003 031f 	and.w	r3, r3, #31
 80008b4:	fa07 f303 	lsl.w	r3, r7, r3
 80008b8:	4213      	tst	r3, r2
 80008ba:	f43f ae72 	beq.w	80005a2 <HAL_RCC_OscConfig+0xc6>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80008be:	f7ff fc85 	bl	80001cc <HAL_GetTick>
 80008c2:	eba0 0008 	sub.w	r0, r0, r8
 80008c6:	2802      	cmp	r0, #2
 80008c8:	d9eb      	bls.n	80008a2 <HAL_RCC_OscConfig+0x3c6>
 80008ca:	e6c3      	b.n	8000654 <HAL_RCC_OscConfig+0x178>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80008cc:	6962      	ldr	r2, [r4, #20]
 80008ce:	2501      	movs	r5, #1
 80008d0:	49a9      	ldr	r1, [pc, #676]	; (8000b78 <HAL_RCC_OscConfig+0x69c>)
 80008d2:	b302      	cbz	r2, 8000916 <HAL_RCC_OscConfig+0x43a>
 80008d4:	fa95 f3a5 	rbit	r3, r5
      __HAL_RCC_LSI_ENABLE();
 80008d8:	fab3 f383 	clz	r3, r3
 80008dc:	440b      	add	r3, r1
 80008de:	009b      	lsls	r3, r3, #2
 80008e0:	601d      	str	r5, [r3, #0]
      tickstart = HAL_GetTick();
 80008e2:	f7ff fc73 	bl	80001cc <HAL_GetTick>
 80008e6:	2602      	movs	r6, #2
 80008e8:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80008ea:	4fa4      	ldr	r7, [pc, #656]	; (8000b7c <HAL_RCC_OscConfig+0x6a0>)
 80008ec:	fa96 f3a6 	rbit	r3, r6
 80008f0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80008f2:	fa96 f3a6 	rbit	r3, r6
 80008f6:	fab3 f383 	clz	r3, r3
 80008fa:	f003 031f 	and.w	r3, r3, #31
 80008fe:	fa05 f303 	lsl.w	r3, r5, r3
 8000902:	4213      	tst	r3, r2
 8000904:	f47f ae51 	bne.w	80005aa <HAL_RCC_OscConfig+0xce>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000908:	f7ff fc60 	bl	80001cc <HAL_GetTick>
 800090c:	eba0 0008 	sub.w	r0, r0, r8
 8000910:	2802      	cmp	r0, #2
 8000912:	d9eb      	bls.n	80008ec <HAL_RCC_OscConfig+0x410>
 8000914:	e69e      	b.n	8000654 <HAL_RCC_OscConfig+0x178>
 8000916:	fa95 f3a5 	rbit	r3, r5
      __HAL_RCC_LSI_DISABLE();
 800091a:	fab3 f383 	clz	r3, r3
 800091e:	440b      	add	r3, r1
 8000920:	009b      	lsls	r3, r3, #2
 8000922:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 8000924:	f7ff fc52 	bl	80001cc <HAL_GetTick>
 8000928:	2602      	movs	r6, #2
 800092a:	4680      	mov	r8, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800092c:	4f93      	ldr	r7, [pc, #588]	; (8000b7c <HAL_RCC_OscConfig+0x6a0>)
 800092e:	fa96 f3a6 	rbit	r3, r6
 8000932:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8000934:	fa96 f3a6 	rbit	r3, r6
 8000938:	fab3 f383 	clz	r3, r3
 800093c:	f003 031f 	and.w	r3, r3, #31
 8000940:	fa05 f303 	lsl.w	r3, r5, r3
 8000944:	4213      	tst	r3, r2
 8000946:	f43f ae30 	beq.w	80005aa <HAL_RCC_OscConfig+0xce>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800094a:	f7ff fc3f 	bl	80001cc <HAL_GetTick>
 800094e:	eba0 0008 	sub.w	r0, r0, r8
 8000952:	2802      	cmp	r0, #2
 8000954:	d9eb      	bls.n	800092e <HAL_RCC_OscConfig+0x452>
 8000956:	e67d      	b.n	8000654 <HAL_RCC_OscConfig+0x178>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000958:	4b88      	ldr	r3, [pc, #544]	; (8000b7c <HAL_RCC_OscConfig+0x6a0>)
 800095a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800095c:	00d1      	lsls	r1, r2, #3
 800095e:	d434      	bmi.n	80009ca <HAL_RCC_OscConfig+0x4ee>
      pwrclkchanged = SET;
 8000960:	2601      	movs	r6, #1
      __HAL_RCC_PWR_CLK_ENABLE();
 8000962:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000964:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8000968:	625a      	str	r2, [r3, #36]	; 0x24
 800096a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800096c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000970:	9301      	str	r3, [sp, #4]
 8000972:	9b01      	ldr	r3, [sp, #4]
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000974:	4d82      	ldr	r5, [pc, #520]	; (8000b80 <HAL_RCC_OscConfig+0x6a4>)
 8000976:	682b      	ldr	r3, [r5, #0]
 8000978:	05da      	lsls	r2, r3, #23
 800097a:	d528      	bpl.n	80009ce <HAL_RCC_OscConfig+0x4f2>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800097c:	68a3      	ldr	r3, [r4, #8]
 800097e:	4d7f      	ldr	r5, [pc, #508]	; (8000b7c <HAL_RCC_OscConfig+0x6a0>)
 8000980:	2b01      	cmp	r3, #1
 8000982:	d134      	bne.n	80009ee <HAL_RCC_OscConfig+0x512>
 8000984:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000986:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800098a:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 800098c:	f7ff fc1e 	bl	80001cc <HAL_GetTick>
 8000990:	f44f 7500 	mov.w	r5, #512	; 0x200
 8000994:	4681      	mov	r9, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000996:	2701      	movs	r7, #1
 8000998:	f8df 81e0 	ldr.w	r8, [pc, #480]	; 8000b7c <HAL_RCC_OscConfig+0x6a0>
 800099c:	fa95 f3a5 	rbit	r3, r5
 80009a0:	f8d8 2034 	ldr.w	r2, [r8, #52]	; 0x34
 80009a4:	fa95 f3a5 	rbit	r3, r5
 80009a8:	fab3 f383 	clz	r3, r3
 80009ac:	f003 031f 	and.w	r3, r3, #31
 80009b0:	fa07 f303 	lsl.w	r3, r7, r3
 80009b4:	4213      	tst	r3, r2
 80009b6:	d04e      	beq.n	8000a56 <HAL_RCC_OscConfig+0x57a>
    if(pwrclkchanged == SET)
 80009b8:	2e00      	cmp	r6, #0
 80009ba:	f43f adfa 	beq.w	80005b2 <HAL_RCC_OscConfig+0xd6>
      __HAL_RCC_PWR_CLK_DISABLE();
 80009be:	4a6f      	ldr	r2, [pc, #444]	; (8000b7c <HAL_RCC_OscConfig+0x6a0>)
 80009c0:	6a53      	ldr	r3, [r2, #36]	; 0x24
 80009c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80009c6:	6253      	str	r3, [r2, #36]	; 0x24
 80009c8:	e5f3      	b.n	80005b2 <HAL_RCC_OscConfig+0xd6>
    FlagStatus       pwrclkchanged = RESET;
 80009ca:	2600      	movs	r6, #0
 80009cc:	e7d2      	b.n	8000974 <HAL_RCC_OscConfig+0x498>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80009ce:	682b      	ldr	r3, [r5, #0]
 80009d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009d4:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 80009d6:	f7ff fbf9 	bl	80001cc <HAL_GetTick>
 80009da:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80009dc:	682b      	ldr	r3, [r5, #0]
 80009de:	05db      	lsls	r3, r3, #23
 80009e0:	d4cc      	bmi.n	800097c <HAL_RCC_OscConfig+0x4a0>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80009e2:	f7ff fbf3 	bl	80001cc <HAL_GetTick>
 80009e6:	1bc0      	subs	r0, r0, r7
 80009e8:	2864      	cmp	r0, #100	; 0x64
 80009ea:	d9f7      	bls.n	80009dc <HAL_RCC_OscConfig+0x500>
 80009ec:	e632      	b.n	8000654 <HAL_RCC_OscConfig+0x178>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80009ee:	bb23      	cbnz	r3, 8000a3a <HAL_RCC_OscConfig+0x55e>
 80009f0:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 80009f2:	f44f 7700 	mov.w	r7, #512	; 0x200
 80009f6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80009fa:	636b      	str	r3, [r5, #52]	; 0x34
 80009fc:	6b6b      	ldr	r3, [r5, #52]	; 0x34
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80009fe:	f04f 0801 	mov.w	r8, #1
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a02:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000a06:	636b      	str	r3, [r5, #52]	; 0x34
      tickstart = HAL_GetTick();
 8000a08:	f7ff fbe0 	bl	80001cc <HAL_GetTick>
 8000a0c:	4681      	mov	r9, r0
 8000a0e:	fa97 f3a7 	rbit	r3, r7
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000a12:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 8000a14:	fa97 f3a7 	rbit	r3, r7
 8000a18:	fab3 f383 	clz	r3, r3
 8000a1c:	f003 031f 	and.w	r3, r3, #31
 8000a20:	fa08 f303 	lsl.w	r3, r8, r3
 8000a24:	4213      	tst	r3, r2
 8000a26:	d0c7      	beq.n	80009b8 <HAL_RCC_OscConfig+0x4dc>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a28:	f7ff fbd0 	bl	80001cc <HAL_GetTick>
 8000a2c:	f241 3388 	movw	r3, #5000	; 0x1388
 8000a30:	eba0 0009 	sub.w	r0, r0, r9
 8000a34:	4298      	cmp	r0, r3
 8000a36:	d9ea      	bls.n	8000a0e <HAL_RCC_OscConfig+0x532>
 8000a38:	e60c      	b.n	8000654 <HAL_RCC_OscConfig+0x178>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000a3a:	2b05      	cmp	r3, #5
 8000a3c:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000a3e:	d103      	bne.n	8000a48 <HAL_RCC_OscConfig+0x56c>
 8000a40:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a44:	636b      	str	r3, [r5, #52]	; 0x34
 8000a46:	e79d      	b.n	8000984 <HAL_RCC_OscConfig+0x4a8>
 8000a48:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000a4c:	636b      	str	r3, [r5, #52]	; 0x34
 8000a4e:	6b6b      	ldr	r3, [r5, #52]	; 0x34
 8000a50:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000a54:	e799      	b.n	800098a <HAL_RCC_OscConfig+0x4ae>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000a56:	f7ff fbb9 	bl	80001cc <HAL_GetTick>
 8000a5a:	f241 3388 	movw	r3, #5000	; 0x1388
 8000a5e:	eba0 0009 	sub.w	r0, r0, r9
 8000a62:	4298      	cmp	r0, r3
 8000a64:	d99a      	bls.n	800099c <HAL_RCC_OscConfig+0x4c0>
 8000a66:	e5f5      	b.n	8000654 <HAL_RCC_OscConfig+0x178>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000a68:	4d44      	ldr	r5, [pc, #272]	; (8000b7c <HAL_RCC_OscConfig+0x6a0>)
 8000a6a:	68ab      	ldr	r3, [r5, #8]
 8000a6c:	f003 030c 	and.w	r3, r3, #12
 8000a70:	2b0c      	cmp	r3, #12
 8000a72:	f43f adc8 	beq.w	8000606 <HAL_RCC_OscConfig+0x12a>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000a76:	2a02      	cmp	r2, #2
 8000a78:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000a7c:	d156      	bne.n	8000b2c <HAL_RCC_OscConfig+0x650>
 8000a7e:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8000a82:	fab3 f383 	clz	r3, r3
 8000a86:	2200      	movs	r2, #0
 8000a88:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000a8c:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 8000a90:	009b      	lsls	r3, r3, #2
 8000a92:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000a94:	f7ff fb9a 	bl	80001cc <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000a98:	462e      	mov	r6, r5
        tickstart = HAL_GetTick();
 8000a9a:	4680      	mov	r8, r0
 8000a9c:	f04f 7700 	mov.w	r7, #33554432	; 0x2000000
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000aa0:	2501      	movs	r5, #1
 8000aa2:	fa97 f3a7 	rbit	r3, r7
 8000aa6:	6832      	ldr	r2, [r6, #0]
 8000aa8:	fa97 f3a7 	rbit	r3, r7
 8000aac:	fab3 f383 	clz	r3, r3
 8000ab0:	f003 031f 	and.w	r3, r3, #31
 8000ab4:	fa05 f303 	lsl.w	r3, r5, r3
 8000ab8:	4213      	tst	r3, r2
 8000aba:	d130      	bne.n	8000b1e <HAL_RCC_OscConfig+0x642>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8000abc:	68b2      	ldr	r2, [r6, #8]
 8000abe:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8000ac0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8000ac2:	f422 027d 	bic.w	r2, r2, #16580608	; 0xfd0000
 8000ac6:	430b      	orrs	r3, r1
 8000ac8:	4313      	orrs	r3, r2
 8000aca:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8000acc:	4313      	orrs	r3, r2
 8000ace:	60b3      	str	r3, [r6, #8]
 8000ad0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000ad4:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_ENABLE();
 8000ad8:	fab3 f383 	clz	r3, r3
 8000adc:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000ae0:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 8000ae4:	009b      	lsls	r3, r3, #2
 8000ae6:	601d      	str	r5, [r3, #0]
        tickstart = HAL_GetTick();
 8000ae8:	f7ff fb70 	bl	80001cc <HAL_GetTick>
 8000aec:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 8000af0:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8000af2:	2501      	movs	r5, #1
 8000af4:	4e21      	ldr	r6, [pc, #132]	; (8000b7c <HAL_RCC_OscConfig+0x6a0>)
 8000af6:	fa94 f3a4 	rbit	r3, r4
 8000afa:	6832      	ldr	r2, [r6, #0]
 8000afc:	fa94 f3a4 	rbit	r3, r4
 8000b00:	fab3 f383 	clz	r3, r3
 8000b04:	f003 031f 	and.w	r3, r3, #31
 8000b08:	fa05 f303 	lsl.w	r3, r5, r3
 8000b0c:	4213      	tst	r3, r2
 8000b0e:	f47f ad54 	bne.w	80005ba <HAL_RCC_OscConfig+0xde>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b12:	f7ff fb5b 	bl	80001cc <HAL_GetTick>
 8000b16:	1bc0      	subs	r0, r0, r7
 8000b18:	2802      	cmp	r0, #2
 8000b1a:	d9ec      	bls.n	8000af6 <HAL_RCC_OscConfig+0x61a>
 8000b1c:	e59a      	b.n	8000654 <HAL_RCC_OscConfig+0x178>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b1e:	f7ff fb55 	bl	80001cc <HAL_GetTick>
 8000b22:	eba0 0008 	sub.w	r0, r0, r8
 8000b26:	2802      	cmp	r0, #2
 8000b28:	d9bb      	bls.n	8000aa2 <HAL_RCC_OscConfig+0x5c6>
 8000b2a:	e593      	b.n	8000654 <HAL_RCC_OscConfig+0x178>
 8000b2c:	fa93 f3a3 	rbit	r3, r3
        __HAL_RCC_PLL_DISABLE();
 8000b30:	fab3 f383 	clz	r3, r3
 8000b34:	2200      	movs	r2, #0
 8000b36:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8000b3a:	f503 138e 	add.w	r3, r3, #1163264	; 0x11c000
 8000b3e:	009b      	lsls	r3, r3, #2
 8000b40:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8000b42:	f7ff fb43 	bl	80001cc <HAL_GetTick>
 8000b46:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 8000b4a:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8000b4c:	2601      	movs	r6, #1
 8000b4e:	fa94 f3a4 	rbit	r3, r4
 8000b52:	682a      	ldr	r2, [r5, #0]
 8000b54:	fa94 f3a4 	rbit	r3, r4
 8000b58:	fab3 f383 	clz	r3, r3
 8000b5c:	f003 031f 	and.w	r3, r3, #31
 8000b60:	fa06 f303 	lsl.w	r3, r6, r3
 8000b64:	4213      	tst	r3, r2
 8000b66:	f43f ad28 	beq.w	80005ba <HAL_RCC_OscConfig+0xde>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000b6a:	f7ff fb2f 	bl	80001cc <HAL_GetTick>
 8000b6e:	1bc0      	subs	r0, r0, r7
 8000b70:	2802      	cmp	r0, #2
 8000b72:	d9ec      	bls.n	8000b4e <HAL_RCC_OscConfig+0x672>
 8000b74:	e56e      	b.n	8000654 <HAL_RCC_OscConfig+0x178>
 8000b76:	bf00      	nop
 8000b78:	1091c1a0 	.word	0x1091c1a0
 8000b7c:	40023800 	.word	0x40023800
 8000b80:	40007000 	.word	0x40007000

08000b84 <HAL_RCC_GetSysClockFreq>:
  tmpreg = RCC->CFGR;
 8000b84:	491e      	ldr	r1, [pc, #120]	; (8000c00 <HAL_RCC_GetSysClockFreq+0x7c>)
{
 8000b86:	b510      	push	{r4, lr}
  tmpreg = RCC->CFGR;
 8000b88:	688b      	ldr	r3, [r1, #8]
  switch (tmpreg & RCC_CFGR_SWS)
 8000b8a:	f003 020c 	and.w	r2, r3, #12
 8000b8e:	2a08      	cmp	r2, #8
 8000b90:	d005      	beq.n	8000b9e <HAL_RCC_GetSysClockFreq+0x1a>
 8000b92:	2a0c      	cmp	r2, #12
 8000b94:	d005      	beq.n	8000ba2 <HAL_RCC_GetSysClockFreq+0x1e>
 8000b96:	2a04      	cmp	r2, #4
 8000b98:	d122      	bne.n	8000be0 <HAL_RCC_GetSysClockFreq+0x5c>
      sysclockfreq = HSI_VALUE;
 8000b9a:	481a      	ldr	r0, [pc, #104]	; (8000c04 <HAL_RCC_GetSysClockFreq+0x80>)
}
 8000b9c:	bd10      	pop	{r4, pc}
      sysclockfreq = HSE_VALUE;
 8000b9e:	481a      	ldr	r0, [pc, #104]	; (8000c08 <HAL_RCC_GetSysClockFreq+0x84>)
 8000ba0:	bd10      	pop	{r4, pc}
 8000ba2:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8000ba6:	fa92 f2a2 	rbit	r2, r2
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_BITNUMBER];
 8000baa:	fab2 f282 	clz	r2, r2
 8000bae:	f403 1070 	and.w	r0, r3, #3932160	; 0x3c0000
 8000bb2:	fa20 f202 	lsr.w	r2, r0, r2
 8000bb6:	4815      	ldr	r0, [pc, #84]	; (8000c0c <HAL_RCC_GetSysClockFreq+0x88>)
 8000bb8:	5c84      	ldrb	r4, [r0, r2]
 8000bba:	f44f 0040 	mov.w	r0, #12582912	; 0xc00000
 8000bbe:	fa90 f0a0 	rbit	r0, r0
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_BITNUMBER) + 1U;
 8000bc2:	fab0 f280 	clz	r2, r0
 8000bc6:	f403 0040 	and.w	r0, r3, #12582912	; 0xc00000
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000bca:	688b      	ldr	r3, [r1, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_BITNUMBER) + 1U;
 8000bcc:	40d0      	lsrs	r0, r2
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8000bce:	03db      	lsls	r3, r3, #15
        pllvco = (HSE_VALUE * pllm) / plld;
 8000bd0:	bf4c      	ite	mi
 8000bd2:	4b0d      	ldrmi	r3, [pc, #52]	; (8000c08 <HAL_RCC_GetSysClockFreq+0x84>)
        pllvco = (HSI_VALUE * pllm) / plld;
 8000bd4:	4b0b      	ldrpl	r3, [pc, #44]	; (8000c04 <HAL_RCC_GetSysClockFreq+0x80>)
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_BITNUMBER) + 1U;
 8000bd6:	3001      	adds	r0, #1
        pllvco = (HSI_VALUE * pllm) / plld;
 8000bd8:	4363      	muls	r3, r4
 8000bda:	fbb3 f0f0 	udiv	r0, r3, r0
 8000bde:	bd10      	pop	{r4, pc}
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_BITNUMBER;
 8000be0:	6848      	ldr	r0, [r1, #4]
 8000be2:	f44f 4360 	mov.w	r3, #57344	; 0xe000
 8000be6:	fa93 f3a3 	rbit	r3, r3
 8000bea:	fab3 f383 	clz	r3, r3
 8000bee:	f400 4060 	and.w	r0, r0, #57344	; 0xe000
 8000bf2:	40d8      	lsrs	r0, r3
      sysclockfreq = (32768U * (1U << (msiclkrange + 1U)));
 8000bf4:	1c43      	adds	r3, r0, #1
 8000bf6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8000bfa:	4098      	lsls	r0, r3
 8000bfc:	bd10      	pop	{r4, pc}
 8000bfe:	bf00      	nop
 8000c00:	40023800 	.word	0x40023800
 8000c04:	00f42400 	.word	0x00f42400
 8000c08:	007a1200 	.word	0x007a1200
 8000c0c:	08001788 	.word	0x08001788

08000c10 <HAL_RCC_ClockConfig>:
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000c10:	4b6a      	ldr	r3, [pc, #424]	; (8000dbc <HAL_RCC_ClockConfig+0x1ac>)
{
 8000c12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000c16:	681a      	ldr	r2, [r3, #0]
{
 8000c18:	4606      	mov	r6, r0
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000c1a:	f002 0201 	and.w	r2, r2, #1
 8000c1e:	428a      	cmp	r2, r1
{
 8000c20:	460d      	mov	r5, r1
  if(FLatency > (FLASH->ACR & FLASH_ACR_LATENCY))
 8000c22:	d330      	bcc.n	8000c86 <HAL_RCC_ClockConfig+0x76>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8000c24:	6832      	ldr	r2, [r6, #0]
 8000c26:	0794      	lsls	r4, r2, #30
 8000c28:	d440      	bmi.n	8000cac <HAL_RCC_ClockConfig+0x9c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8000c2a:	07d0      	lsls	r0, r2, #31
 8000c2c:	d446      	bmi.n	8000cbc <HAL_RCC_ClockConfig+0xac>
  if(FLatency < (FLASH->ACR & FLASH_ACR_LATENCY))
 8000c2e:	4b63      	ldr	r3, [pc, #396]	; (8000dbc <HAL_RCC_ClockConfig+0x1ac>)
 8000c30:	681a      	ldr	r2, [r3, #0]
 8000c32:	f002 0201 	and.w	r2, r2, #1
 8000c36:	4295      	cmp	r5, r2
 8000c38:	f0c0 80ae 	bcc.w	8000d98 <HAL_RCC_ClockConfig+0x188>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8000c3c:	6832      	ldr	r2, [r6, #0]
 8000c3e:	0751      	lsls	r1, r2, #29
 8000c40:	f100 80b3 	bmi.w	8000daa <HAL_RCC_ClockConfig+0x19a>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8000c44:	0713      	lsls	r3, r2, #28
 8000c46:	d507      	bpl.n	8000c58 <HAL_RCC_ClockConfig+0x48>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8000c48:	4a5d      	ldr	r2, [pc, #372]	; (8000dc0 <HAL_RCC_ClockConfig+0x1b0>)
 8000c4a:	6931      	ldr	r1, [r6, #16]
 8000c4c:	6893      	ldr	r3, [r2, #8]
 8000c4e:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 8000c52:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8000c56:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8000c58:	f7ff ff94 	bl	8000b84 <HAL_RCC_GetSysClockFreq>
 8000c5c:	4b58      	ldr	r3, [pc, #352]	; (8000dc0 <HAL_RCC_ClockConfig+0x1b0>)
 8000c5e:	22f0      	movs	r2, #240	; 0xf0
 8000c60:	689b      	ldr	r3, [r3, #8]
 8000c62:	fa92 f2a2 	rbit	r2, r2
 8000c66:	fab2 f282 	clz	r2, r2
 8000c6a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000c6e:	40d3      	lsrs	r3, r2
 8000c70:	4a54      	ldr	r2, [pc, #336]	; (8000dc4 <HAL_RCC_ClockConfig+0x1b4>)
 8000c72:	5cd3      	ldrb	r3, [r2, r3]
 8000c74:	40d8      	lsrs	r0, r3
 8000c76:	4b54      	ldr	r3, [pc, #336]	; (8000dc8 <HAL_RCC_ClockConfig+0x1b8>)
 8000c78:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 8000c7a:	2000      	movs	r0, #0
 8000c7c:	f7ff fa7e 	bl	800017c <HAL_InitTick>
  return HAL_OK;
 8000c80:	2000      	movs	r0, #0
}
 8000c82:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000c86:	2901      	cmp	r1, #1
 8000c88:	bf02      	ittt	eq
 8000c8a:	681a      	ldreq	r2, [r3, #0]
 8000c8c:	f042 0204 	orreq.w	r2, r2, #4
 8000c90:	601a      	streq	r2, [r3, #0]
 8000c92:	681a      	ldr	r2, [r3, #0]
 8000c94:	f022 0201 	bic.w	r2, r2, #1
 8000c98:	430a      	orrs	r2, r1
 8000c9a:	601a      	str	r2, [r3, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	f003 0301 	and.w	r3, r3, #1
 8000ca2:	4299      	cmp	r1, r3
 8000ca4:	d0be      	beq.n	8000c24 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 8000ca6:	2001      	movs	r0, #1
 8000ca8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8000cac:	4944      	ldr	r1, [pc, #272]	; (8000dc0 <HAL_RCC_ClockConfig+0x1b0>)
 8000cae:	68b0      	ldr	r0, [r6, #8]
 8000cb0:	688b      	ldr	r3, [r1, #8]
 8000cb2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8000cb6:	4303      	orrs	r3, r0
 8000cb8:	608b      	str	r3, [r1, #8]
 8000cba:	e7b6      	b.n	8000c2a <HAL_RCC_ClockConfig+0x1a>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000cbc:	6872      	ldr	r2, [r6, #4]
 8000cbe:	4940      	ldr	r1, [pc, #256]	; (8000dc0 <HAL_RCC_ClockConfig+0x1b0>)
 8000cc0:	2a02      	cmp	r2, #2
 8000cc2:	d10f      	bne.n	8000ce4 <HAL_RCC_ClockConfig+0xd4>
 8000cc4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000cc8:	fa93 f0a3 	rbit	r0, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 8000ccc:	6808      	ldr	r0, [r1, #0]
 8000cce:	fa93 f3a3 	rbit	r3, r3
 8000cd2:	fab3 f383 	clz	r3, r3
 8000cd6:	2101      	movs	r1, #1
 8000cd8:	f003 031f 	and.w	r3, r3, #31
 8000cdc:	fa01 f303 	lsl.w	r3, r1, r3
 8000ce0:	4203      	tst	r3, r0
 8000ce2:	e013      	b.n	8000d0c <HAL_RCC_ClockConfig+0xfc>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000ce4:	2a03      	cmp	r2, #3
 8000ce6:	d102      	bne.n	8000cee <HAL_RCC_ClockConfig+0xde>
 8000ce8:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000cec:	e7ec      	b.n	8000cc8 <HAL_RCC_ClockConfig+0xb8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8000cee:	2a01      	cmp	r2, #1
 8000cf0:	d129      	bne.n	8000d46 <HAL_RCC_ClockConfig+0x136>
 8000cf2:	2302      	movs	r3, #2
 8000cf4:	fa93 f0a3 	rbit	r0, r3
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cf8:	6809      	ldr	r1, [r1, #0]
 8000cfa:	fa93 f3a3 	rbit	r3, r3
 8000cfe:	fab3 f383 	clz	r3, r3
 8000d02:	f003 031f 	and.w	r3, r3, #31
 8000d06:	fa02 f303 	lsl.w	r3, r2, r3
 8000d0a:	420b      	tst	r3, r1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == RESET)
 8000d0c:	d0cb      	beq.n	8000ca6 <HAL_RCC_ClockConfig+0x96>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000d0e:	4c2c      	ldr	r4, [pc, #176]	; (8000dc0 <HAL_RCC_ClockConfig+0x1b0>)
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d10:	f241 3888 	movw	r8, #5000	; 0x1388
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8000d14:	68a3      	ldr	r3, [r4, #8]
 8000d16:	f023 0303 	bic.w	r3, r3, #3
 8000d1a:	431a      	orrs	r2, r3
 8000d1c:	60a2      	str	r2, [r4, #8]
    tickstart = HAL_GetTick();
 8000d1e:	f7ff fa55 	bl	80001cc <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d22:	6873      	ldr	r3, [r6, #4]
    tickstart = HAL_GetTick();
 8000d24:	4607      	mov	r7, r0
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8000d26:	2b02      	cmp	r3, #2
 8000d28:	d110      	bne.n	8000d4c <HAL_RCC_ClockConfig+0x13c>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8000d2a:	68a3      	ldr	r3, [r4, #8]
 8000d2c:	f003 030c 	and.w	r3, r3, #12
 8000d30:	2b08      	cmp	r3, #8
 8000d32:	f43f af7c 	beq.w	8000c2e <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d36:	f7ff fa49 	bl	80001cc <HAL_GetTick>
 8000d3a:	1bc0      	subs	r0, r0, r7
 8000d3c:	4540      	cmp	r0, r8
 8000d3e:	d9f4      	bls.n	8000d2a <HAL_RCC_ClockConfig+0x11a>
          return HAL_TIMEOUT;
 8000d40:	2003      	movs	r0, #3
 8000d42:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000d46:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000d4a:	e7bd      	b.n	8000cc8 <HAL_RCC_ClockConfig+0xb8>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8000d4c:	2b03      	cmp	r3, #3
 8000d4e:	d10b      	bne.n	8000d68 <HAL_RCC_ClockConfig+0x158>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8000d50:	68a3      	ldr	r3, [r4, #8]
 8000d52:	f003 030c 	and.w	r3, r3, #12
 8000d56:	2b0c      	cmp	r3, #12
 8000d58:	f43f af69 	beq.w	8000c2e <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d5c:	f7ff fa36 	bl	80001cc <HAL_GetTick>
 8000d60:	1bc0      	subs	r0, r0, r7
 8000d62:	4540      	cmp	r0, r8
 8000d64:	d9f4      	bls.n	8000d50 <HAL_RCC_ClockConfig+0x140>
 8000d66:	e7eb      	b.n	8000d40 <HAL_RCC_ClockConfig+0x130>
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8000d68:	2b01      	cmp	r3, #1
 8000d6a:	d110      	bne.n	8000d8e <HAL_RCC_ClockConfig+0x17e>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8000d6c:	68a3      	ldr	r3, [r4, #8]
 8000d6e:	f003 030c 	and.w	r3, r3, #12
 8000d72:	2b04      	cmp	r3, #4
 8000d74:	f43f af5b 	beq.w	8000c2e <HAL_RCC_ClockConfig+0x1e>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d78:	f7ff fa28 	bl	80001cc <HAL_GetTick>
 8000d7c:	1bc0      	subs	r0, r0, r7
 8000d7e:	4540      	cmp	r0, r8
 8000d80:	d9f4      	bls.n	8000d6c <HAL_RCC_ClockConfig+0x15c>
 8000d82:	e7dd      	b.n	8000d40 <HAL_RCC_ClockConfig+0x130>
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8000d84:	f7ff fa22 	bl	80001cc <HAL_GetTick>
 8000d88:	1bc0      	subs	r0, r0, r7
 8000d8a:	4540      	cmp	r0, r8
 8000d8c:	d8d8      	bhi.n	8000d40 <HAL_RCC_ClockConfig+0x130>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8000d8e:	68a3      	ldr	r3, [r4, #8]
 8000d90:	f013 0f0c 	tst.w	r3, #12
 8000d94:	d1f6      	bne.n	8000d84 <HAL_RCC_ClockConfig+0x174>
 8000d96:	e74a      	b.n	8000c2e <HAL_RCC_ClockConfig+0x1e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8000d98:	681a      	ldr	r2, [r3, #0]
 8000d9a:	f022 0201 	bic.w	r2, r2, #1
 8000d9e:	601a      	str	r2, [r3, #0]
    if((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8000da0:	681b      	ldr	r3, [r3, #0]
 8000da2:	07da      	lsls	r2, r3, #31
 8000da4:	f53f af7f 	bmi.w	8000ca6 <HAL_RCC_ClockConfig+0x96>
 8000da8:	e748      	b.n	8000c3c <HAL_RCC_ClockConfig+0x2c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8000daa:	4905      	ldr	r1, [pc, #20]	; (8000dc0 <HAL_RCC_ClockConfig+0x1b0>)
 8000dac:	68f0      	ldr	r0, [r6, #12]
 8000dae:	688b      	ldr	r3, [r1, #8]
 8000db0:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000db4:	4303      	orrs	r3, r0
 8000db6:	608b      	str	r3, [r1, #8]
 8000db8:	e744      	b.n	8000c44 <HAL_RCC_ClockConfig+0x34>
 8000dba:	bf00      	nop
 8000dbc:	40023c00 	.word	0x40023c00
 8000dc0:	40023800 	.word	0x40023800
 8000dc4:	08001770 	.word	0x08001770
 8000dc8:	2000000c 	.word	0x2000000c

08000dcc <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8000dcc:	4b08      	ldr	r3, [pc, #32]	; (8000df0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8000dce:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 8000dd2:	689b      	ldr	r3, [r3, #8]
 8000dd4:	fa92 f2a2 	rbit	r2, r2
 8000dd8:	fab2 f282 	clz	r2, r2
 8000ddc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8000de0:	40d3      	lsrs	r3, r2
 8000de2:	4a04      	ldr	r2, [pc, #16]	; (8000df4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8000de4:	5cd3      	ldrb	r3, [r2, r3]
 8000de6:	4a04      	ldr	r2, [pc, #16]	; (8000df8 <HAL_RCC_GetPCLK1Freq+0x2c>)
 8000de8:	6810      	ldr	r0, [r2, #0]
}    
 8000dea:	40d8      	lsrs	r0, r3
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop
 8000df0:	40023800 	.word	0x40023800
 8000df4:	08001780 	.word	0x08001780
 8000df8:	2000000c 	.word	0x2000000c

08000dfc <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8000dfc:	4b08      	ldr	r3, [pc, #32]	; (8000e20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8000dfe:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8000e02:	689b      	ldr	r3, [r3, #8]
 8000e04:	fa92 f2a2 	rbit	r2, r2
 8000e08:	fab2 f282 	clz	r2, r2
 8000e0c:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 8000e10:	40d3      	lsrs	r3, r2
 8000e12:	4a04      	ldr	r2, [pc, #16]	; (8000e24 <HAL_RCC_GetPCLK2Freq+0x28>)
 8000e14:	5cd3      	ldrb	r3, [r2, r3]
 8000e16:	4a04      	ldr	r2, [pc, #16]	; (8000e28 <HAL_RCC_GetPCLK2Freq+0x2c>)
 8000e18:	6810      	ldr	r0, [r2, #0]
} 
 8000e1a:	40d8      	lsrs	r0, r3
 8000e1c:	4770      	bx	lr
 8000e1e:	bf00      	nop
 8000e20:	40023800 	.word	0x40023800
 8000e24:	08001780 	.word	0x08001780
 8000e28:	2000000c 	.word	0x2000000c

08000e2c <SPI_WaitOnFlagUntilTimeout>:
  * @param  Status: Flag status to check: RESET or set
  * @param  Timeout: Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitOnFlagUntilTimeout(struct __SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus Status, uint32_t Timeout)  
{
 8000e2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000e30:	4604      	mov	r4, r0
 8000e32:	460e      	mov	r6, r1
 8000e34:	4690      	mov	r8, r2
 8000e36:	461d      	mov	r5, r3
  uint32_t tickstart = 0;

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8000e38:	f7ff f9c8 	bl	80001cc <HAL_GetTick>
 8000e3c:	4607      	mov	r7, r0

  /* Wait until flag is set */
  if(Status == RESET)
 8000e3e:	f1b8 0f00 	cmp.w	r8, #0
 8000e42:	d033      	beq.n	8000eac <SPI_WaitOnFlagUntilTimeout+0x80>
      }
    }
  }
  else
  {
    while(__HAL_SPI_GET_FLAG(hspi, Flag) != RESET)
 8000e44:	6822      	ldr	r2, [r4, #0]
 8000e46:	6893      	ldr	r3, [r2, #8]
 8000e48:	ea36 0303 	bics.w	r3, r6, r3
 8000e4c:	d133      	bne.n	8000eb6 <SPI_WaitOnFlagUntilTimeout+0x8a>
    {
      if(Timeout != HAL_MAX_DELAY)
 8000e4e:	1c6b      	adds	r3, r5, #1
 8000e50:	d0f9      	beq.n	8000e46 <SPI_WaitOnFlagUntilTimeout+0x1a>
      {
        if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000e52:	b145      	cbz	r5, 8000e66 <SPI_WaitOnFlagUntilTimeout+0x3a>
 8000e54:	f7ff f9ba 	bl	80001cc <HAL_GetTick>
 8000e58:	1bc0      	subs	r0, r0, r7
 8000e5a:	4285      	cmp	r5, r0
 8000e5c:	d2f2      	bcs.n	8000e44 <SPI_WaitOnFlagUntilTimeout+0x18>
 8000e5e:	e002      	b.n	8000e66 <SPI_WaitOnFlagUntilTimeout+0x3a>
      if(Timeout != HAL_MAX_DELAY)
 8000e60:	1c69      	adds	r1, r5, #1
 8000e62:	d024      	beq.n	8000eae <SPI_WaitOnFlagUntilTimeout+0x82>
        if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000e64:	b9ed      	cbnz	r5, 8000ea2 <SPI_WaitOnFlagUntilTimeout+0x76>
          /* Disable the SPI and reset the CRC: the CRC value should be cleared
             on both master and slave sides in order to resynchronize the master
             and slave for their respective CRC calculation */

          /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
          __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8000e66:	6823      	ldr	r3, [r4, #0]
 8000e68:	685a      	ldr	r2, [r3, #4]
 8000e6a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8000e6e:	605a      	str	r2, [r3, #4]

          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8000e70:	681a      	ldr	r2, [r3, #0]
 8000e72:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8000e76:	601a      	str	r2, [r3, #0]

          /* Reset CRC Calculation */
          if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8000e78:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8000e7a:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8000e7e:	d107      	bne.n	8000e90 <SPI_WaitOnFlagUntilTimeout+0x64>
          {
            SPI_RESET_CRC(hspi);
 8000e80:	681a      	ldr	r2, [r3, #0]
 8000e82:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000e86:	601a      	str	r2, [r3, #0]
 8000e88:	681a      	ldr	r2, [r3, #0]
 8000e8a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000e8e:	601a      	str	r2, [r3, #0]
          }

          hspi->State= HAL_SPI_STATE_READY;
 8000e90:	2301      	movs	r3, #1
 8000e92:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

          /* Process Unlocked */
          __HAL_UNLOCK(hspi);
 8000e96:	2300      	movs	r3, #0

          return HAL_TIMEOUT;
 8000e98:	2003      	movs	r0, #3
          __HAL_UNLOCK(hspi);
 8000e9a:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
          return HAL_TIMEOUT;
 8000e9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000ea2:	f7ff f993 	bl	80001cc <HAL_GetTick>
 8000ea6:	1bc0      	subs	r0, r0, r7
 8000ea8:	4285      	cmp	r5, r0
 8000eaa:	d3dc      	bcc.n	8000e66 <SPI_WaitOnFlagUntilTimeout+0x3a>
    while(__HAL_SPI_GET_FLAG(hspi, Flag) == RESET)
 8000eac:	6822      	ldr	r2, [r4, #0]
 8000eae:	6893      	ldr	r3, [r2, #8]
 8000eb0:	ea36 0303 	bics.w	r3, r6, r3
 8000eb4:	d1d4      	bne.n	8000e60 <SPI_WaitOnFlagUntilTimeout+0x34>
        }
      }
    }
  }
  return HAL_OK;
 8000eb6:	2000      	movs	r0, #0
 8000eb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08000ebc <HAL_SPI_Transmit>:
{
 8000ebc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000ebe:	4604      	mov	r4, r0
  if(hspi->State == HAL_SPI_STATE_READY)
 8000ec0:	f890 0051 	ldrb.w	r0, [r0, #81]	; 0x51
{
 8000ec4:	461d      	mov	r5, r3
  if(hspi->State == HAL_SPI_STATE_READY)
 8000ec6:	b2c0      	uxtb	r0, r0
 8000ec8:	2801      	cmp	r0, #1
 8000eca:	f040 80a7 	bne.w	800101c <HAL_SPI_Transmit+0x160>
    if((pData == NULL ) || (Size == 0)) 
 8000ece:	2900      	cmp	r1, #0
 8000ed0:	d064      	beq.n	8000f9c <HAL_SPI_Transmit+0xe0>
 8000ed2:	2a00      	cmp	r2, #0
 8000ed4:	d062      	beq.n	8000f9c <HAL_SPI_Transmit+0xe0>
    __HAL_LOCK(hspi);
 8000ed6:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8000eda:	2b01      	cmp	r3, #1
 8000edc:	f000 809e 	beq.w	800101c <HAL_SPI_Transmit+0x160>
    hspi->State = HAL_SPI_STATE_BUSY_TX;
 8000ee0:	2312      	movs	r3, #18
 8000ee2:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
    hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	6563      	str	r3, [r4, #84]	; 0x54
    hspi->TxISR = 0;
 8000eea:	64e3      	str	r3, [r4, #76]	; 0x4c
    hspi->TxXferCount = Size;
 8000eec:	86e2      	strh	r2, [r4, #54]	; 0x36
    hspi->RxISR = 0;
 8000eee:	64a3      	str	r3, [r4, #72]	; 0x48
    hspi->pRxBuffPtr  = NULL;
 8000ef0:	63a3      	str	r3, [r4, #56]	; 0x38
    hspi->RxXferSize  = 0;
 8000ef2:	87a3      	strh	r3, [r4, #60]	; 0x3c
    hspi->RxXferCount = 0;
 8000ef4:	87e3      	strh	r3, [r4, #62]	; 0x3e
    if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8000ef6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    __HAL_LOCK(hspi);
 8000ef8:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
    if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8000efc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
    hspi->pTxBuffPtr  = pData;
 8000f00:	6321      	str	r1, [r4, #48]	; 0x30
    hspi->TxXferSize  = Size;
 8000f02:	86a2      	strh	r2, [r4, #52]	; 0x34
 8000f04:	6823      	ldr	r3, [r4, #0]
    if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8000f06:	d107      	bne.n	8000f18 <HAL_SPI_Transmit+0x5c>
      SPI_RESET_CRC(hspi);
 8000f08:	681a      	ldr	r2, [r3, #0]
 8000f0a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8000f0e:	601a      	str	r2, [r3, #0]
 8000f10:	681a      	ldr	r2, [r3, #0]
 8000f12:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8000f16:	601a      	str	r2, [r3, #0]
    if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000f18:	68a2      	ldr	r2, [r4, #8]
    if(hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8000f1a:	68e0      	ldr	r0, [r4, #12]
    if(hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8000f1c:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
      SPI_1LINE_TX(hspi);
 8000f20:	bf02      	ittt	eq
 8000f22:	681a      	ldreq	r2, [r3, #0]
 8000f24:	f442 4280 	orreq.w	r2, r2, #16384	; 0x4000
 8000f28:	601a      	streq	r2, [r3, #0]
    if((hspi->Instance->CR1 &SPI_CR1_SPE) != SPI_CR1_SPE)
 8000f2a:	681a      	ldr	r2, [r3, #0]
 8000f2c:	0652      	lsls	r2, r2, #25
      __HAL_SPI_ENABLE(hspi);
 8000f2e:	bf5e      	ittt	pl
 8000f30:	681a      	ldrpl	r2, [r3, #0]
 8000f32:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 8000f36:	601a      	strpl	r2, [r3, #0]
 8000f38:	6862      	ldr	r2, [r4, #4]
    if(hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8000f3a:	2800      	cmp	r0, #0
 8000f3c:	d137      	bne.n	8000fae <HAL_SPI_Transmit+0xf2>
      if((hspi->Init.Mode == SPI_MODE_SLAVE)|| (hspi->TxXferCount == 0x01))
 8000f3e:	b11a      	cbz	r2, 8000f48 <HAL_SPI_Transmit+0x8c>
 8000f40:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8000f42:	b292      	uxth	r2, r2
 8000f44:	2a01      	cmp	r2, #1
 8000f46:	d107      	bne.n	8000f58 <HAL_SPI_Transmit+0x9c>
        hspi->Instance->DR = (*hspi->pTxBuffPtr++);
 8000f48:	1c4a      	adds	r2, r1, #1
 8000f4a:	6322      	str	r2, [r4, #48]	; 0x30
 8000f4c:	780a      	ldrb	r2, [r1, #0]
 8000f4e:	60da      	str	r2, [r3, #12]
        hspi->TxXferCount--;
 8000f50:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000f52:	3b01      	subs	r3, #1
 8000f54:	b29b      	uxth	r3, r3
 8000f56:	86e3      	strh	r3, [r4, #54]	; 0x36
      while(hspi->TxXferCount > 0)
 8000f58:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000f5a:	b29b      	uxth	r3, r3
 8000f5c:	b9b3      	cbnz	r3, 8000f8c <HAL_SPI_Transmit+0xd0>
      if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE) 
 8000f5e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_TXE, RESET, Timeout) != HAL_OK)
 8000f60:	2102      	movs	r1, #2
      if(hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE) 
 8000f62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8000f66:	bf08      	it	eq
 8000f68:	6822      	ldreq	r2, [r4, #0]
    if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_TXE, RESET, Timeout) != HAL_OK)
 8000f6a:	4620      	mov	r0, r4
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8000f6c:	bf02      	ittt	eq
 8000f6e:	6813      	ldreq	r3, [r2, #0]
 8000f70:	f443 5380 	orreq.w	r3, r3, #4096	; 0x1000
 8000f74:	6013      	streq	r3, [r2, #0]
    if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_TXE, RESET, Timeout) != HAL_OK)
 8000f76:	462b      	mov	r3, r5
 8000f78:	2200      	movs	r2, #0
 8000f7a:	f7ff ff57 	bl	8000e2c <SPI_WaitOnFlagUntilTimeout>
 8000f7e:	2800      	cmp	r0, #0
 8000f80:	d035      	beq.n	8000fee <HAL_SPI_Transmit+0x132>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8000f82:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000f84:	f043 0320 	orr.w	r3, r3, #32
 8000f88:	6563      	str	r3, [r4, #84]	; 0x54
 8000f8a:	e006      	b.n	8000f9a <HAL_SPI_Transmit+0xde>
        if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_TXE, RESET, Timeout) != HAL_OK)
 8000f8c:	462b      	mov	r3, r5
 8000f8e:	2200      	movs	r2, #0
 8000f90:	2102      	movs	r1, #2
 8000f92:	4620      	mov	r0, r4
 8000f94:	f7ff ff4a 	bl	8000e2c <SPI_WaitOnFlagUntilTimeout>
 8000f98:	b110      	cbz	r0, 8000fa0 <HAL_SPI_Transmit+0xe4>
      return HAL_TIMEOUT;
 8000f9a:	2003      	movs	r0, #3
}
 8000f9c:	b003      	add	sp, #12
 8000f9e:	bd30      	pop	{r4, r5, pc}
        hspi->Instance->DR = (*hspi->pTxBuffPtr++);
 8000fa0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000fa2:	6822      	ldr	r2, [r4, #0]
 8000fa4:	1c59      	adds	r1, r3, #1
 8000fa6:	6321      	str	r1, [r4, #48]	; 0x30
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	60d3      	str	r3, [r2, #12]
 8000fac:	e7d0      	b.n	8000f50 <HAL_SPI_Transmit+0x94>
      if((hspi->Init.Mode == SPI_MODE_SLAVE) || (hspi->TxXferCount == 0x01))
 8000fae:	b11a      	cbz	r2, 8000fb8 <HAL_SPI_Transmit+0xfc>
 8000fb0:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
 8000fb2:	b292      	uxth	r2, r2
 8000fb4:	2a01      	cmp	r2, #1
 8000fb6:	d107      	bne.n	8000fc8 <HAL_SPI_Transmit+0x10c>
        hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
 8000fb8:	f831 2b02 	ldrh.w	r2, [r1], #2
 8000fbc:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr+=2;
 8000fbe:	6321      	str	r1, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8000fc0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000fc2:	3b01      	subs	r3, #1
 8000fc4:	b29b      	uxth	r3, r3
 8000fc6:	86e3      	strh	r3, [r4, #54]	; 0x36
      while(hspi->TxXferCount > 0)
 8000fc8:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8000fca:	b29b      	uxth	r3, r3
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d0c6      	beq.n	8000f5e <HAL_SPI_Transmit+0xa2>
        if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_TXE, RESET, Timeout) != HAL_OK)
 8000fd0:	462b      	mov	r3, r5
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	2102      	movs	r1, #2
 8000fd6:	4620      	mov	r0, r4
 8000fd8:	f7ff ff28 	bl	8000e2c <SPI_WaitOnFlagUntilTimeout>
 8000fdc:	2800      	cmp	r0, #0
 8000fde:	d1dc      	bne.n	8000f9a <HAL_SPI_Transmit+0xde>
        hspi->Instance->DR = *((uint16_t*)hspi->pTxBuffPtr);
 8000fe0:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8000fe2:	6822      	ldr	r2, [r4, #0]
 8000fe4:	f833 1b02 	ldrh.w	r1, [r3], #2
 8000fe8:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr+=2;
 8000fea:	6323      	str	r3, [r4, #48]	; 0x30
 8000fec:	e7e8      	b.n	8000fc0 <HAL_SPI_Transmit+0x104>
    if(SPI_WaitOnFlagUntilTimeout(hspi, SPI_FLAG_BSY, SET, Timeout) != HAL_OK)
 8000fee:	462b      	mov	r3, r5
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	2180      	movs	r1, #128	; 0x80
 8000ff4:	4620      	mov	r0, r4
 8000ff6:	f7ff ff19 	bl	8000e2c <SPI_WaitOnFlagUntilTimeout>
 8000ffa:	2800      	cmp	r0, #0
 8000ffc:	d1c1      	bne.n	8000f82 <HAL_SPI_Transmit+0xc6>
    if(hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8000ffe:	68a3      	ldr	r3, [r4, #8]
 8001000:	b92b      	cbnz	r3, 800100e <HAL_SPI_Transmit+0x152>
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001002:	6823      	ldr	r3, [r4, #0]
 8001004:	68da      	ldr	r2, [r3, #12]
 8001006:	9201      	str	r2, [sp, #4]
 8001008:	689b      	ldr	r3, [r3, #8]
 800100a:	9301      	str	r3, [sp, #4]
 800100c:	9b01      	ldr	r3, [sp, #4]
    hspi->State = HAL_SPI_STATE_READY; 
 800100e:	2301      	movs	r3, #1
 8001010:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
    __HAL_UNLOCK(hspi);
 8001014:	2300      	movs	r3, #0
 8001016:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
    return HAL_OK;
 800101a:	e7bf      	b.n	8000f9c <HAL_SPI_Transmit+0xe0>
    return HAL_BUSY;
 800101c:	2002      	movs	r0, #2
 800101e:	e7bd      	b.n	8000f9c <HAL_SPI_Transmit+0xe0>

08001020 <HAL_SPI_Init>:
  * @param  hspi: pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001020:	b510      	push	{r4, lr}
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001022:	4604      	mov	r4, r0
 8001024:	2800      	cmp	r0, #0
 8001026:	d036      	beq.n	8001096 <HAL_SPI_Init+0x76>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  assert_param(IS_SPI_CRC_CALCULATION(hspi->Init.CRCCalculation));
  assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001028:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 800102c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8001030:	b91b      	cbnz	r3, 800103a <HAL_SPI_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001032:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001036:	f000 fa5d 	bl	80014f4 <HAL_SPI_MspInit>
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800103a:	2302      	movs	r3, #2

  /* Disble the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800103c:	6821      	ldr	r1, [r4, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 800103e:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8001042:	680b      	ldr	r3, [r1, #0]
  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  hspi->Instance->CR1 = (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
                         hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                         hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation);
 8001044:	68a0      	ldr	r0, [r4, #8]
  __HAL_SPI_DISABLE(hspi);
 8001046:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800104a:	600b      	str	r3, [r1, #0]
                         hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation);
 800104c:	6863      	ldr	r3, [r4, #4]
                         hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
 800104e:	69a2      	ldr	r2, [r4, #24]
                         hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation);
 8001050:	4303      	orrs	r3, r0
 8001052:	68e0      	ldr	r0, [r4, #12]
 8001054:	4303      	orrs	r3, r0
 8001056:	6920      	ldr	r0, [r4, #16]
 8001058:	4303      	orrs	r3, r0
 800105a:	6960      	ldr	r0, [r4, #20]
 800105c:	4303      	orrs	r3, r0
 800105e:	69e0      	ldr	r0, [r4, #28]
 8001060:	4303      	orrs	r3, r0
 8001062:	6a20      	ldr	r0, [r4, #32]
 8001064:	4303      	orrs	r3, r0
 8001066:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001068:	4303      	orrs	r3, r0
                         hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
 800106a:	f402 7000 	and.w	r0, r2, #512	; 0x200
                         hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation);
 800106e:	4303      	orrs	r3, r0
  hspi->Instance->CR1 = (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8001070:	600b      	str	r3, [r1, #0]

  /* Configure : NSS management */
  hspi->Instance->CR2 = (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode);
 8001072:	0c12      	lsrs	r2, r2, #16
 8001074:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8001076:	f002 0204 	and.w	r2, r2, #4
 800107a:	431a      	orrs	r2, r3

  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  hspi->Instance->CRCPR = hspi->Init.CRCPolynomial;
 800107c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
  hspi->Instance->CR2 = (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode);
 800107e:	604a      	str	r2, [r1, #4]
  hspi->Instance->CRCPR = hspi->Init.CRCPolynomial;
 8001080:	610b      	str	r3, [r1, #16]

#if defined (STM32L100xC) || defined (STM32L151xC) || defined (STM32L152xC) || defined (STM32L162xC) || defined (STM32L151xCA) || defined (STM32L151xD) || defined (STM32L152xCA) || defined (STM32L152xD) || defined (STM32L162xCA) || defined (STM32L162xD) || defined (STM32L151xE) || defined (STM32L151xDX) || defined (STM32L152xE) || defined (STM32L152xDX) || defined (STM32L162xE) || defined (STM32L162xDX)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001082:	69cb      	ldr	r3, [r1, #28]
#endif

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001084:	2000      	movs	r0, #0
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001086:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800108a:	61cb      	str	r3, [r1, #28]
  hspi->State = HAL_SPI_STATE_READY;
 800108c:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800108e:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 8001090:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51

  return HAL_OK;
 8001094:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001096:	2001      	movs	r0, #1
}
 8001098:	bd10      	pop	{r4, pc}
	...

0800109c <UART_SetConfig>:
  * @param  huart: Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800109c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80010a0:	4681      	mov	r9, r0
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*------- UART-associated USART registers setting : CR2 Configuration ------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according 
   * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80010a2:	6805      	ldr	r5, [r0, #0]
 80010a4:	68c2      	ldr	r2, [r0, #12]
 80010a6:	692b      	ldr	r3, [r5, #16]
  /* Configure the UART Word Length, Parity and mode: 
     Set the M bits according to huart->Init.WordLength value 
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80010a8:	69c1      	ldr	r1, [r0, #28]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80010aa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80010ae:	4313      	orrs	r3, r2
 80010b0:	612b      	str	r3, [r5, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80010b2:	6883      	ldr	r3, [r0, #8]
 80010b4:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, 
 80010b6:	68ea      	ldr	r2, [r5, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80010b8:	4303      	orrs	r3, r0
 80010ba:	f8d9 0014 	ldr.w	r0, [r9, #20]
  MODIFY_REG(huart->Instance->CR1, 
 80010be:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80010c2:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, 
 80010c4:	f022 020c 	bic.w	r2, r2, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80010c8:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, 
 80010ca:	4313      	orrs	r3, r2
 80010cc:	60eb      	str	r3, [r5, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8), 
             tmpreg);
  
  /*------- UART-associated USART registers setting : CR3 Configuration ------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80010ce:	696b      	ldr	r3, [r5, #20]
 80010d0:	f8d9 2018 	ldr.w	r2, [r9, #24]
 80010d4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80010d8:	4313      	orrs	r3, r2
  
  /* Check the Over Sampling */
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80010da:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80010de:	616b      	str	r3, [r5, #20]
 80010e0:	4b7e      	ldr	r3, [pc, #504]	; (80012dc <UART_SetConfig+0x240>)
  if(huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80010e2:	d17f      	bne.n	80011e4 <UART_SetConfig+0x148>
  {
    /*------- UART-associated USART registers setting : BRR Configuration ------*/
    if((huart->Instance == USART1))
 80010e4:	429d      	cmp	r5, r3
 80010e6:	f04f 0419 	mov.w	r4, #25
 80010ea:	d147      	bne.n	800117c <UART_SetConfig+0xe0>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80010ec:	f7ff fe86 	bl	8000dfc <HAL_RCC_GetPCLK2Freq>
 80010f0:	fb04 f300 	mul.w	r3, r4, r0
 80010f4:	f8d9 7004 	ldr.w	r7, [r9, #4]
 80010f8:	f04f 0864 	mov.w	r8, #100	; 0x64
 80010fc:	007f      	lsls	r7, r7, #1
 80010fe:	fbb3 f3f7 	udiv	r3, r3, r7
 8001102:	fbb3 f3f8 	udiv	r3, r3, r8
 8001106:	011f      	lsls	r7, r3, #4
 8001108:	f7ff fe78 	bl	8000dfc <HAL_RCC_GetPCLK2Freq>
 800110c:	4360      	muls	r0, r4
 800110e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001112:	005b      	lsls	r3, r3, #1
 8001114:	fbb0 f6f3 	udiv	r6, r0, r3
 8001118:	f7ff fe70 	bl	8000dfc <HAL_RCC_GetPCLK2Freq>
 800111c:	4360      	muls	r0, r4
 800111e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001122:	005b      	lsls	r3, r3, #1
 8001124:	fbb0 f3f3 	udiv	r3, r0, r3
 8001128:	fbb3 f3f8 	udiv	r3, r3, r8
 800112c:	fb08 6313 	mls	r3, r8, r3, r6
 8001130:	00db      	lsls	r3, r3, #3
 8001132:	3332      	adds	r3, #50	; 0x32
 8001134:	fbb3 f3f8 	udiv	r3, r3, r8
 8001138:	005b      	lsls	r3, r3, #1
 800113a:	f403 76f8 	and.w	r6, r3, #496	; 0x1f0
 800113e:	f7ff fe5d 	bl	8000dfc <HAL_RCC_GetPCLK2Freq>
 8001142:	4360      	muls	r0, r4
 8001144:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8001148:	0052      	lsls	r2, r2, #1
 800114a:	fbb0 faf2 	udiv	sl, r0, r2
 800114e:	f7ff fe55 	bl	8000dfc <HAL_RCC_GetPCLK2Freq>
    }
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001152:	4360      	muls	r0, r4
 8001154:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001158:	005b      	lsls	r3, r3, #1
 800115a:	fbb0 f3f3 	udiv	r3, r0, r3
 800115e:	fbb3 f3f8 	udiv	r3, r3, r8
 8001162:	fb08 a313 	mls	r3, r8, r3, sl
 8001166:	00db      	lsls	r3, r3, #3
 8001168:	3332      	adds	r3, #50	; 0x32
 800116a:	fbb3 f3f8 	udiv	r3, r3, r8
 800116e:	f003 0307 	and.w	r3, r3, #7
 8001172:	443b      	add	r3, r7
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001174:	4433      	add	r3, r6
 8001176:	60ab      	str	r3, [r5, #8]
 8001178:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 800117c:	f7ff fe26 	bl	8000dcc <HAL_RCC_GetPCLK1Freq>
 8001180:	fb04 f300 	mul.w	r3, r4, r0
 8001184:	f8d9 7004 	ldr.w	r7, [r9, #4]
 8001188:	f04f 0864 	mov.w	r8, #100	; 0x64
 800118c:	007f      	lsls	r7, r7, #1
 800118e:	fbb3 f3f7 	udiv	r3, r3, r7
 8001192:	fbb3 f3f8 	udiv	r3, r3, r8
 8001196:	011f      	lsls	r7, r3, #4
 8001198:	f7ff fe18 	bl	8000dcc <HAL_RCC_GetPCLK1Freq>
 800119c:	4360      	muls	r0, r4
 800119e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80011a2:	005b      	lsls	r3, r3, #1
 80011a4:	fbb0 f6f3 	udiv	r6, r0, r3
 80011a8:	f7ff fe10 	bl	8000dcc <HAL_RCC_GetPCLK1Freq>
 80011ac:	4360      	muls	r0, r4
 80011ae:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80011b2:	005b      	lsls	r3, r3, #1
 80011b4:	fbb0 f3f3 	udiv	r3, r0, r3
 80011b8:	fbb3 f3f8 	udiv	r3, r3, r8
 80011bc:	fb08 6313 	mls	r3, r8, r3, r6
 80011c0:	00db      	lsls	r3, r3, #3
 80011c2:	3332      	adds	r3, #50	; 0x32
 80011c4:	fbb3 f3f8 	udiv	r3, r3, r8
 80011c8:	005b      	lsls	r3, r3, #1
 80011ca:	f403 76f8 	and.w	r6, r3, #496	; 0x1f0
 80011ce:	f7ff fdfd 	bl	8000dcc <HAL_RCC_GetPCLK1Freq>
 80011d2:	4360      	muls	r0, r4
 80011d4:	f8d9 2004 	ldr.w	r2, [r9, #4]
 80011d8:	0052      	lsls	r2, r2, #1
 80011da:	fbb0 faf2 	udiv	sl, r0, r2
 80011de:	f7ff fdf5 	bl	8000dcc <HAL_RCC_GetPCLK1Freq>
 80011e2:	e7b6      	b.n	8001152 <UART_SetConfig+0xb6>
    if((huart->Instance == USART1))
 80011e4:	429d      	cmp	r5, r3
 80011e6:	f04f 0419 	mov.w	r4, #25
 80011ea:	d143      	bne.n	8001274 <UART_SetConfig+0x1d8>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 80011ec:	f7ff fe06 	bl	8000dfc <HAL_RCC_GetPCLK2Freq>
 80011f0:	fb04 f300 	mul.w	r3, r4, r0
 80011f4:	f8d9 6004 	ldr.w	r6, [r9, #4]
 80011f8:	f04f 0864 	mov.w	r8, #100	; 0x64
 80011fc:	00b6      	lsls	r6, r6, #2
 80011fe:	fbb3 f3f6 	udiv	r3, r3, r6
 8001202:	fbb3 f3f8 	udiv	r3, r3, r8
 8001206:	011e      	lsls	r6, r3, #4
 8001208:	f7ff fdf8 	bl	8000dfc <HAL_RCC_GetPCLK2Freq>
 800120c:	4360      	muls	r0, r4
 800120e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001212:	009b      	lsls	r3, r3, #2
 8001214:	fbb0 f7f3 	udiv	r7, r0, r3
 8001218:	f7ff fdf0 	bl	8000dfc <HAL_RCC_GetPCLK2Freq>
 800121c:	4360      	muls	r0, r4
 800121e:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001222:	009b      	lsls	r3, r3, #2
 8001224:	fbb0 f3f3 	udiv	r3, r0, r3
 8001228:	fbb3 f3f8 	udiv	r3, r3, r8
 800122c:	fb08 7313 	mls	r3, r8, r3, r7
 8001230:	011b      	lsls	r3, r3, #4
 8001232:	3332      	adds	r3, #50	; 0x32
 8001234:	fbb3 f3f8 	udiv	r3, r3, r8
 8001238:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 800123c:	f7ff fdde 	bl	8000dfc <HAL_RCC_GetPCLK2Freq>
 8001240:	4360      	muls	r0, r4
 8001242:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8001246:	0092      	lsls	r2, r2, #2
 8001248:	fbb0 faf2 	udiv	sl, r0, r2
 800124c:	f7ff fdd6 	bl	8000dfc <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 8001250:	4360      	muls	r0, r4
 8001252:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8001256:	009b      	lsls	r3, r3, #2
 8001258:	fbb0 f3f3 	udiv	r3, r0, r3
 800125c:	fbb3 f3f8 	udiv	r3, r3, r8
 8001260:	fb08 a313 	mls	r3, r8, r3, sl
 8001264:	011b      	lsls	r3, r3, #4
 8001266:	3332      	adds	r3, #50	; 0x32
 8001268:	fbb3 f3f8 	udiv	r3, r3, r8
 800126c:	f003 030f 	and.w	r3, r3, #15
 8001270:	433b      	orrs	r3, r7
 8001272:	e77f      	b.n	8001174 <UART_SetConfig+0xd8>
 8001274:	f7ff fdaa 	bl	8000dcc <HAL_RCC_GetPCLK1Freq>
 8001278:	fb04 f300 	mul.w	r3, r4, r0
 800127c:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8001280:	f04f 0864 	mov.w	r8, #100	; 0x64
 8001284:	00b6      	lsls	r6, r6, #2
 8001286:	fbb3 f3f6 	udiv	r3, r3, r6
 800128a:	fbb3 f3f8 	udiv	r3, r3, r8
 800128e:	011e      	lsls	r6, r3, #4
 8001290:	f7ff fd9c 	bl	8000dcc <HAL_RCC_GetPCLK1Freq>
 8001294:	4360      	muls	r0, r4
 8001296:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800129a:	009b      	lsls	r3, r3, #2
 800129c:	fbb0 f7f3 	udiv	r7, r0, r3
 80012a0:	f7ff fd94 	bl	8000dcc <HAL_RCC_GetPCLK1Freq>
 80012a4:	4360      	muls	r0, r4
 80012a6:	f8d9 3004 	ldr.w	r3, [r9, #4]
 80012aa:	009b      	lsls	r3, r3, #2
 80012ac:	fbb0 f3f3 	udiv	r3, r0, r3
 80012b0:	fbb3 f3f8 	udiv	r3, r3, r8
 80012b4:	fb08 7313 	mls	r3, r8, r3, r7
 80012b8:	011b      	lsls	r3, r3, #4
 80012ba:	3332      	adds	r3, #50	; 0x32
 80012bc:	fbb3 f3f8 	udiv	r3, r3, r8
 80012c0:	f003 07f0 	and.w	r7, r3, #240	; 0xf0
 80012c4:	f7ff fd82 	bl	8000dcc <HAL_RCC_GetPCLK1Freq>
 80012c8:	4360      	muls	r0, r4
 80012ca:	f8d9 2004 	ldr.w	r2, [r9, #4]
 80012ce:	0092      	lsls	r2, r2, #2
 80012d0:	fbb0 faf2 	udiv	sl, r0, r2
 80012d4:	f7ff fd7a 	bl	8000dcc <HAL_RCC_GetPCLK1Freq>
 80012d8:	e7ba      	b.n	8001250 <UART_SetConfig+0x1b4>
 80012da:	bf00      	nop
 80012dc:	40013800 	.word	0x40013800

080012e0 <HAL_UART_Init>:
{
 80012e0:	b510      	push	{r4, lr}
  if(huart == NULL)
 80012e2:	4604      	mov	r4, r0
 80012e4:	b330      	cbz	r0, 8001334 <HAL_UART_Init+0x54>
  if(huart->State == HAL_UART_STATE_RESET)
 80012e6:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80012ea:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80012ee:	b91b      	cbnz	r3, 80012f8 <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80012f0:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80012f4:	f000 f9a2 	bl	800163c <HAL_UART_MspInit>
  huart->State = HAL_UART_STATE_BUSY;
 80012f8:	2302      	movs	r3, #2
  __HAL_UART_DISABLE(huart);
 80012fa:	6822      	ldr	r2, [r4, #0]
  huart->State = HAL_UART_STATE_BUSY;
 80012fc:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 8001300:	68d3      	ldr	r3, [r2, #12]
  UART_SetConfig(huart);
 8001302:	4620      	mov	r0, r4
  __HAL_UART_DISABLE(huart);
 8001304:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001308:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 800130a:	f7ff fec7 	bl	800109c <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800130e:	6823      	ldr	r3, [r4, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001310:	2000      	movs	r0, #0
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001312:	691a      	ldr	r2, [r3, #16]
 8001314:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001318:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800131a:	695a      	ldr	r2, [r3, #20]
 800131c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001320:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8001322:	68da      	ldr	r2, [r3, #12]
 8001324:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001328:	60da      	str	r2, [r3, #12]
  huart->State= HAL_UART_STATE_READY;
 800132a:	2301      	movs	r3, #1
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800132c:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->State= HAL_UART_STATE_READY;
 800132e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 8001332:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8001334:	2001      	movs	r0, #1
}
 8001336:	bd10      	pop	{r4, pc}

08001338 <MX_GPIO_Init>:
        * EXTI
*/
void MX_GPIO_Init(void)
{

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001338:	2214      	movs	r2, #20
{
 800133a:	b530      	push	{r4, r5, lr}
 800133c:	b08b      	sub	sp, #44	; 0x2c
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800133e:	eb0d 0002 	add.w	r0, sp, r2
 8001342:	2100      	movs	r1, #0
 8001344:	f000 f9f8 	bl	8001738 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001348:	4b20      	ldr	r3, [pc, #128]	; (80013cc <MX_GPIO_Init+0x94>)
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800134a:	4d21      	ldr	r5, [pc, #132]	; (80013d0 <MX_GPIO_Init+0x98>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800134c:	69da      	ldr	r2, [r3, #28]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800134e:	4628      	mov	r0, r5
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001350:	f042 0204 	orr.w	r2, r2, #4
 8001354:	61da      	str	r2, [r3, #28]
 8001356:	69da      	ldr	r2, [r3, #28]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001358:	2120      	movs	r1, #32
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800135a:	f002 0204 	and.w	r2, r2, #4
 800135e:	9201      	str	r2, [sp, #4]
 8001360:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001362:	69da      	ldr	r2, [r3, #28]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001364:	2400      	movs	r4, #0
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001366:	f042 0220 	orr.w	r2, r2, #32
 800136a:	61da      	str	r2, [r3, #28]
 800136c:	69da      	ldr	r2, [r3, #28]
 800136e:	f002 0220 	and.w	r2, r2, #32
 8001372:	9202      	str	r2, [sp, #8]
 8001374:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001376:	69da      	ldr	r2, [r3, #28]
 8001378:	f042 0201 	orr.w	r2, r2, #1
 800137c:	61da      	str	r2, [r3, #28]
 800137e:	69da      	ldr	r2, [r3, #28]
 8001380:	f002 0201 	and.w	r2, r2, #1
 8001384:	9203      	str	r2, [sp, #12]
 8001386:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001388:	69da      	ldr	r2, [r3, #28]
 800138a:	f042 0202 	orr.w	r2, r2, #2
 800138e:	61da      	str	r2, [r3, #28]
 8001390:	69db      	ldr	r3, [r3, #28]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001392:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001394:	f003 0302 	and.w	r3, r3, #2
 8001398:	9304      	str	r3, [sp, #16]
 800139a:	9b04      	ldr	r3, [sp, #16]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800139c:	f7ff f858 	bl	8000450 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = B1_Pin;
 80013a0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80013a4:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013a6:	4b0b      	ldr	r3, [pc, #44]	; (80013d4 <MX_GPIO_Init+0x9c>)
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80013a8:	a905      	add	r1, sp, #20
 80013aa:	480b      	ldr	r0, [pc, #44]	; (80013d8 <MX_GPIO_Init+0xa0>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80013ac:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ae:	9407      	str	r4, [sp, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80013b0:	f7fe ff7c 	bl	80002ac <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 80013b4:	2320      	movs	r3, #32
 80013b6:	9305      	str	r3, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013b8:	2301      	movs	r3, #1
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80013ba:	a905      	add	r1, sp, #20
 80013bc:	4628      	mov	r0, r5
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013be:	9306      	str	r3, [sp, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c0:	9407      	str	r4, [sp, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013c2:	9408      	str	r4, [sp, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80013c4:	f7fe ff72 	bl	80002ac <HAL_GPIO_Init>

}
 80013c8:	b00b      	add	sp, #44	; 0x2c
 80013ca:	bd30      	pop	{r4, r5, pc}
 80013cc:	40023800 	.word	0x40023800
 80013d0:	40020000 	.word	0x40020000
 80013d4:	10110000 	.word	0x10110000
 80013d8:	40020800 	.word	0x40020800

080013dc <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 80013dc:	b530      	push	{r4, r5, lr}
 80013de:	b093      	sub	sp, #76	; 0x4c
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 80013e0:	2234      	movs	r2, #52	; 0x34
 80013e2:	2100      	movs	r1, #0
 80013e4:	a805      	add	r0, sp, #20
 80013e6:	f000 f9a7 	bl	8001738 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 80013ea:	2100      	movs	r1, #0
 80013ec:	2214      	movs	r2, #20
 80013ee:	4668      	mov	r0, sp
 80013f0:	f000 f9a2 	bl	8001738 <memset>

	/**Configure the main internal regulator output voltage
	 */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013f4:	4a12      	ldr	r2, [pc, #72]	; (8001440 <SystemClock_Config+0x64>)
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80013f6:	2400      	movs	r4, #0
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013f8:	6813      	ldr	r3, [r2, #0]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013fa:	2501      	movs	r5, #1
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013fc:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8001400:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001404:	6013      	str	r3, [r2, #0]
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001406:	2302      	movs	r3, #2
 8001408:	9305      	str	r3, [sp, #20]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800140a:	930e      	str	r3, [sp, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 800140c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001410:	2210      	movs	r2, #16
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL6;
 8001412:	9310      	str	r3, [sp, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8001414:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001418:	a805      	add	r0, sp, #20
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800141a:	9209      	str	r2, [sp, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 800141c:	9311      	str	r3, [sp, #68]	; 0x44
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800141e:	9508      	str	r5, [sp, #32]
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001420:	940f      	str	r4, [sp, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001422:	f7ff f85b 	bl	80004dc <HAL_RCC_OscConfig>
	}
	/**Initializes the CPU, AHB and APB busses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001426:	220f      	movs	r2, #15
 8001428:	2303      	movs	r3, #3
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 800142a:	4629      	mov	r1, r5
 800142c:	4668      	mov	r0, sp
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800142e:	e88d 000c 	stmia.w	sp, {r2, r3}
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001432:	9402      	str	r4, [sp, #8]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001434:	9403      	str	r4, [sp, #12]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001436:	9404      	str	r4, [sp, #16]
	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK) {
 8001438:	f7ff fbea 	bl	8000c10 <HAL_RCC_ClockConfig>
		Error_Handler();
	}
}
 800143c:	b013      	add	sp, #76	; 0x4c
 800143e:	bd30      	pop	{r4, r5, pc}
 8001440:	40007000 	.word	0x40007000

08001444 <main>:
int main(void) {
 8001444:	b507      	push	{r0, r1, r2, lr}
	HAL_Init();
 8001446:	f7fe fead 	bl	80001a4 <HAL_Init>
	SystemClock_Config();
 800144a:	f7ff ffc7 	bl	80013dc <SystemClock_Config>
	MX_GPIO_Init();
 800144e:	f7ff ff73 	bl	8001338 <MX_GPIO_Init>
	MX_SPI2_Init();
 8001452:	f000 f82d 	bl	80014b0 <MX_SPI2_Init>
	MX_USART2_UART_Init();
 8001456:	f000 f8d5 	bl	8001604 <MX_USART2_UART_Init>
		REGS.N.PWDN = 1;
 800145a:	4c11      	ldr	r4, [pc, #68]	; (80014a0 <main+0x5c>)
		HAL_SPI_Transmit(&hspi2, SpiData, 3, 1000);
 800145c:	4d11      	ldr	r5, [pc, #68]	; (80014a4 <main+0x60>)
		REGS.N.PWDN = 1;
 800145e:	79a3      	ldrb	r3, [r4, #6]
 8001460:	4e11      	ldr	r6, [pc, #68]	; (80014a8 <main+0x64>)
 8001462:	f043 0320 	orr.w	r3, r3, #32
 8001466:	71a3      	strb	r3, [r4, #6]
		REGS.R.CPo_TRI = 1;
 8001468:	78a3      	ldrb	r3, [r4, #2]
 800146a:	f043 0308 	orr.w	r3, r3, #8
 800146e:	70a3      	strb	r3, [r4, #2]
	for (int i = 0; RegsArray[i]; i++) {
 8001470:	f856 3f04 	ldr.w	r3, [r6, #4]!
 8001474:	b923      	cbnz	r3, 8001480 <main+0x3c>
		HAL_Delay(1000);
 8001476:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800147a:	f7fe fead 	bl	80001d8 <HAL_Delay>
		REGS.N.PWDN = 1;
 800147e:	e7ee      	b.n	800145e <main+0x1a>
		SpiData[1] = (data >> 8) & 0xFF;
 8001480:	0a1a      	lsrs	r2, r3, #8
		SpiData[2] = data & 0xFF;
 8001482:	f88d 3006 	strb.w	r3, [sp, #6]
		SpiData[0] = (data >> 16) & 0xFF;
 8001486:	0c1b      	lsrs	r3, r3, #16
		SpiData[1] = (data >> 8) & 0xFF;
 8001488:	f88d 2005 	strb.w	r2, [sp, #5]
		SpiData[0] = (data >> 16) & 0xFF;
 800148c:	f88d 3004 	strb.w	r3, [sp, #4]
		HAL_SPI_Transmit(&hspi2, SpiData, 3, 1000);
 8001490:	2203      	movs	r2, #3
 8001492:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001496:	a901      	add	r1, sp, #4
 8001498:	4628      	mov	r0, r5
 800149a:	f7ff fd0f 	bl	8000ebc <HAL_SPI_Transmit>
 800149e:	e7e7      	b.n	8001470 <main+0x2c>
 80014a0:	20000000 	.word	0x20000000
 80014a4:	20000030 	.word	0x20000030
 80014a8:	0800175c 	.word	0x0800175c

080014ac <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 80014ac:	4770      	bx	lr
	...

080014b0 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80014b0:	b508      	push	{r3, lr}

  hspi2.Instance = SPI2;
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80014b2:	f44f 7e82 	mov.w	lr, #260	; 0x104
  hspi2.Instance = SPI2;
 80014b6:	480d      	ldr	r0, [pc, #52]	; (80014ec <MX_SPI2_Init+0x3c>)
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80014b8:	4b0d      	ldr	r3, [pc, #52]	; (80014f0 <MX_SPI2_Init+0x40>)
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80014ba:	f44f 2280 	mov.w	r2, #262144	; 0x40000
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80014be:	e880 4008 	stmia.w	r0, {r3, lr}
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80014c2:	2300      	movs	r3, #0
  hspi2.Init.NSS = SPI_NSS_HARD_OUTPUT;
 80014c4:	6182      	str	r2, [r0, #24]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80014c6:	6083      	str	r3, [r0, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80014c8:	60c3      	str	r3, [r0, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014ca:	6103      	str	r3, [r0, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80014cc:	6143      	str	r3, [r0, #20]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80014ce:	2238      	movs	r2, #56	; 0x38
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014d0:	6203      	str	r3, [r0, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80014d2:	6243      	str	r3, [r0, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014d4:	6283      	str	r3, [r0, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80014d6:	230a      	movs	r3, #10
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
 80014d8:	61c2      	str	r2, [r0, #28]
  hspi2.Init.CRCPolynomial = 10;
 80014da:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80014dc:	f7ff fda0 	bl	8001020 <HAL_SPI_Init>
 80014e0:	b118      	cbz	r0, 80014ea <MX_SPI2_Init+0x3a>
  {
    Error_Handler();
  }

}
 80014e2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80014e6:	f7ff bfe1 	b.w	80014ac <Error_Handler>
 80014ea:	bd08      	pop	{r3, pc}
 80014ec:	20000030 	.word	0x20000030
 80014f0:	40003800 	.word	0x40003800

080014f4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80014f4:	b510      	push	{r4, lr}
 80014f6:	4604      	mov	r4, r0
 80014f8:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014fa:	2214      	movs	r2, #20
 80014fc:	2100      	movs	r1, #0
 80014fe:	a803      	add	r0, sp, #12
 8001500:	f000 f91a 	bl	8001738 <memset>
  if(spiHandle->Instance==SPI2)
 8001504:	6822      	ldr	r2, [r4, #0]
 8001506:	4b13      	ldr	r3, [pc, #76]	; (8001554 <HAL_SPI_MspInit+0x60>)
 8001508:	429a      	cmp	r2, r3
 800150a:	d120      	bne.n	800154e <HAL_SPI_MspInit+0x5a>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800150c:	f503 3300 	add.w	r3, r3, #131072	; 0x20000
 8001510:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001512:	a903      	add	r1, sp, #12
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001514:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001518:	625a      	str	r2, [r3, #36]	; 0x24
 800151a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800151c:	480e      	ldr	r0, [pc, #56]	; (8001558 <HAL_SPI_MspInit+0x64>)
    __HAL_RCC_SPI2_CLK_ENABLE();
 800151e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8001522:	9201      	str	r2, [sp, #4]
 8001524:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001526:	69da      	ldr	r2, [r3, #28]
 8001528:	f042 0202 	orr.w	r2, r2, #2
 800152c:	61da      	str	r2, [r3, #28]
 800152e:	69db      	ldr	r3, [r3, #28]
 8001530:	f003 0302 	and.w	r3, r3, #2
 8001534:	9302      	str	r3, [sp, #8]
 8001536:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8001538:	f44f 4330 	mov.w	r3, #45056	; 0xb000
 800153c:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800153e:	2302      	movs	r3, #2
 8001540:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001542:	2303      	movs	r3, #3
 8001544:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001546:	2305      	movs	r3, #5
 8001548:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800154a:	f7fe feaf 	bl	80002ac <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800154e:	b008      	add	sp, #32
 8001550:	bd10      	pop	{r4, pc}
 8001552:	bf00      	nop
 8001554:	40003800 	.word	0x40003800
 8001558:	40020400 	.word	0x40020400

0800155c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800155c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 800155e:	4b11      	ldr	r3, [pc, #68]	; (80015a4 <HAL_MspInit+0x48>)
  __HAL_RCC_SYSCFG_CLK_ENABLE();
  __HAL_RCC_PWR_CLK_ENABLE();

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001560:	2007      	movs	r0, #7
  __HAL_RCC_COMP_CLK_ENABLE();
 8001562:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001564:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8001568:	625a      	str	r2, [r3, #36]	; 0x24
 800156a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800156c:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001570:	9201      	str	r2, [sp, #4]
 8001572:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001574:	6a1a      	ldr	r2, [r3, #32]
 8001576:	f042 0201 	orr.w	r2, r2, #1
 800157a:	621a      	str	r2, [r3, #32]
 800157c:	6a1a      	ldr	r2, [r3, #32]
 800157e:	f002 0201 	and.w	r2, r2, #1
 8001582:	9202      	str	r2, [sp, #8]
 8001584:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001586:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001588:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800158c:	625a      	str	r2, [r3, #36]	; 0x24
 800158e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001590:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001594:	9303      	str	r3, [sp, #12]
 8001596:	9b03      	ldr	r3, [sp, #12]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001598:	f7fe fe2c 	bl	80001f4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800159c:	b005      	add	sp, #20
 800159e:	f85d fb04 	ldr.w	pc, [sp], #4
 80015a2:	bf00      	nop
 80015a4:	40023800 	.word	0x40023800

080015a8 <NMI_Handler>:
 80015a8:	4770      	bx	lr

080015aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015aa:	e7fe      	b.n	80015aa <HardFault_Handler>

080015ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015ac:	e7fe      	b.n	80015ac <MemManage_Handler>

080015ae <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015ae:	e7fe      	b.n	80015ae <BusFault_Handler>

080015b0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015b0:	e7fe      	b.n	80015b0 <UsageFault_Handler>

080015b2 <SVC_Handler>:
 80015b2:	4770      	bx	lr

080015b4 <DebugMon_Handler>:
 80015b4:	4770      	bx	lr

080015b6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015b6:	4770      	bx	lr

080015b8 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015b8:	f7fe be00 	b.w	80001bc <HAL_IncTick>

080015bc <SystemInit>:
  * @retval None
  */
void SystemInit (void)
{
  /*!< Set MSION bit */
  RCC->CR |= (uint32_t)0x00000100;
 80015bc:	4b0e      	ldr	r3, [pc, #56]	; (80015f8 <SystemInit+0x3c>)
 80015be:	681a      	ldr	r2, [r3, #0]
 80015c0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80015c4:	601a      	str	r2, [r3, #0]

  /*!< Reset SW[1:0], HPRE[3:0], PPRE1[2:0], PPRE2[2:0], MCOSEL[2:0] and MCOPRE[2:0] bits */
  RCC->CFGR &= (uint32_t)0x88FFC00C;
 80015c6:	6899      	ldr	r1, [r3, #8]
 80015c8:	4a0c      	ldr	r2, [pc, #48]	; (80015fc <SystemInit+0x40>)
 80015ca:	400a      	ands	r2, r1
 80015cc:	609a      	str	r2, [r3, #8]
  
  /*!< Reset HSION, HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xEEFEFFFE;
 80015ce:	681a      	ldr	r2, [r3, #0]
 80015d0:	f022 5288 	bic.w	r2, r2, #285212672	; 0x11000000
 80015d4:	f022 1201 	bic.w	r2, r2, #65537	; 0x10001
 80015d8:	601a      	str	r2, [r3, #0]

  /*!< Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80015da:	681a      	ldr	r2, [r3, #0]
 80015dc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80015e0:	601a      	str	r2, [r3, #0]

  /*!< Reset PLLSRC, PLLMUL[3:0] and PLLDIV[1:0] bits */
  RCC->CFGR &= (uint32_t)0xFF02FFFF;
 80015e2:	689a      	ldr	r2, [r3, #8]
 80015e4:	f422 027d 	bic.w	r2, r2, #16580608	; 0xfd0000
 80015e8:	609a      	str	r2, [r3, #8]

  /*!< Disable all interrupts */
  RCC->CIR = 0x00000000;
 80015ea:	2200      	movs	r2, #0
 80015ec:	60da      	str	r2, [r3, #12]
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 80015ee:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80015f2:	4b03      	ldr	r3, [pc, #12]	; (8001600 <SystemInit+0x44>)
 80015f4:	609a      	str	r2, [r3, #8]
 80015f6:	4770      	bx	lr
 80015f8:	40023800 	.word	0x40023800
 80015fc:	88ffc00c 	.word	0x88ffc00c
 8001600:	e000ed00 	.word	0xe000ed00

08001604 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001604:	b508      	push	{r3, lr}

  huart2.Instance = USART2;
  huart2.Init.BaudRate = 115200;
 8001606:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
  huart2.Instance = USART2;
 800160a:	480a      	ldr	r0, [pc, #40]	; (8001634 <MX_USART2_UART_Init+0x30>)
  huart2.Init.BaudRate = 115200;
 800160c:	4b0a      	ldr	r3, [pc, #40]	; (8001638 <MX_USART2_UART_Init+0x34>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
  huart2.Init.StopBits = UART_STOPBITS_1;
  huart2.Init.Parity = UART_PARITY_NONE;
  huart2.Init.Mode = UART_MODE_TX_RX;
 800160e:	220c      	movs	r2, #12
  huart2.Init.BaudRate = 115200;
 8001610:	e880 4008 	stmia.w	r0, {r3, lr}
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001614:	2300      	movs	r3, #0
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001616:	6142      	str	r2, [r0, #20]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001618:	6083      	str	r3, [r0, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800161a:	60c3      	str	r3, [r0, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800161c:	6103      	str	r3, [r0, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800161e:	6183      	str	r3, [r0, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001620:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001622:	f7ff fe5d 	bl	80012e0 <HAL_UART_Init>
 8001626:	b118      	cbz	r0, 8001630 <MX_USART2_UART_Init+0x2c>
  {
    Error_Handler();
  }

}
 8001628:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800162c:	f7ff bf3e 	b.w	80014ac <Error_Handler>
 8001630:	bd08      	pop	{r3, pc}
 8001632:	bf00      	nop
 8001634:	20000088 	.word	0x20000088
 8001638:	40004400 	.word	0x40004400

0800163c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800163c:	b510      	push	{r4, lr}
 800163e:	4604      	mov	r4, r0
 8001640:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001642:	2214      	movs	r2, #20
 8001644:	2100      	movs	r1, #0
 8001646:	a803      	add	r0, sp, #12
 8001648:	f000 f876 	bl	8001738 <memset>
  if(uartHandle->Instance==USART2)
 800164c:	6822      	ldr	r2, [r4, #0]
 800164e:	4b13      	ldr	r3, [pc, #76]	; (800169c <HAL_UART_MspInit+0x60>)
 8001650:	429a      	cmp	r2, r3
 8001652:	d121      	bne.n	8001698 <HAL_UART_MspInit+0x5c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001654:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8001658:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800165a:	a903      	add	r1, sp, #12
    __HAL_RCC_USART2_CLK_ENABLE();
 800165c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8001660:	625a      	str	r2, [r3, #36]	; 0x24
 8001662:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001664:	480e      	ldr	r0, [pc, #56]	; (80016a0 <HAL_UART_MspInit+0x64>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8001666:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 800166a:	9201      	str	r2, [sp, #4]
 800166c:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800166e:	69da      	ldr	r2, [r3, #28]
 8001670:	f042 0201 	orr.w	r2, r2, #1
 8001674:	61da      	str	r2, [r3, #28]
 8001676:	69db      	ldr	r3, [r3, #28]
 8001678:	f003 0301 	and.w	r3, r3, #1
 800167c:	9302      	str	r3, [sp, #8]
 800167e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001680:	230c      	movs	r3, #12
 8001682:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001684:	2302      	movs	r3, #2
 8001686:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001688:	2301      	movs	r3, #1
 800168a:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800168c:	2303      	movs	r3, #3
 800168e:	9306      	str	r3, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001690:	2307      	movs	r3, #7
 8001692:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001694:	f7fe fe0a 	bl	80002ac <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001698:	b008      	add	sp, #32
 800169a:	bd10      	pop	{r4, pc}
 800169c:	40004400 	.word	0x40004400
 80016a0:	40020000 	.word	0x40020000

080016a4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80016a4:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80016a6:	e003      	b.n	80016b0 <LoopCopyDataInit>

080016a8 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80016a8:	4b0b      	ldr	r3, [pc, #44]	; (80016d8 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80016aa:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80016ac:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80016ae:	3104      	adds	r1, #4

080016b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80016b0:	480a      	ldr	r0, [pc, #40]	; (80016dc <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80016b2:	4b0b      	ldr	r3, [pc, #44]	; (80016e0 <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80016b4:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80016b6:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80016b8:	d3f6      	bcc.n	80016a8 <CopyDataInit>
  ldr r2, =_sbss
 80016ba:	4a0a      	ldr	r2, [pc, #40]	; (80016e4 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80016bc:	e002      	b.n	80016c4 <LoopFillZerobss>

080016be <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80016be:	2300      	movs	r3, #0
  str r3, [r2], #4
 80016c0:	f842 3b04 	str.w	r3, [r2], #4

080016c4 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80016c4:	4b08      	ldr	r3, [pc, #32]	; (80016e8 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80016c6:	429a      	cmp	r2, r3
  bcc FillZerobss
 80016c8:	d3f9      	bcc.n	80016be <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80016ca:	f7ff ff77 	bl	80015bc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016ce:	f000 f80f 	bl	80016f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80016d2:	f7ff feb7 	bl	8001444 <main>
  bx lr
 80016d6:	4770      	bx	lr
  ldr r3, =_sidata
 80016d8:	0800179c 	.word	0x0800179c
  ldr r0, =_sdata
 80016dc:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80016e0:	20000010 	.word	0x20000010
  ldr r2, =_sbss
 80016e4:	20000010 	.word	0x20000010
  ldr r3, = _ebss
 80016e8:	200000c8 	.word	0x200000c8

080016ec <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80016ec:	e7fe      	b.n	80016ec <ADC1_IRQHandler>
	...

080016f0 <__libc_init_array>:
 80016f0:	b570      	push	{r4, r5, r6, lr}
 80016f2:	2500      	movs	r5, #0
 80016f4:	4e0c      	ldr	r6, [pc, #48]	; (8001728 <__libc_init_array+0x38>)
 80016f6:	4c0d      	ldr	r4, [pc, #52]	; (800172c <__libc_init_array+0x3c>)
 80016f8:	1ba4      	subs	r4, r4, r6
 80016fa:	10a4      	asrs	r4, r4, #2
 80016fc:	42a5      	cmp	r5, r4
 80016fe:	d109      	bne.n	8001714 <__libc_init_array+0x24>
 8001700:	f000 f822 	bl	8001748 <_init>
 8001704:	2500      	movs	r5, #0
 8001706:	4e0a      	ldr	r6, [pc, #40]	; (8001730 <__libc_init_array+0x40>)
 8001708:	4c0a      	ldr	r4, [pc, #40]	; (8001734 <__libc_init_array+0x44>)
 800170a:	1ba4      	subs	r4, r4, r6
 800170c:	10a4      	asrs	r4, r4, #2
 800170e:	42a5      	cmp	r5, r4
 8001710:	d105      	bne.n	800171e <__libc_init_array+0x2e>
 8001712:	bd70      	pop	{r4, r5, r6, pc}
 8001714:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001718:	4798      	blx	r3
 800171a:	3501      	adds	r5, #1
 800171c:	e7ee      	b.n	80016fc <__libc_init_array+0xc>
 800171e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8001722:	4798      	blx	r3
 8001724:	3501      	adds	r5, #1
 8001726:	e7f2      	b.n	800170e <__libc_init_array+0x1e>
 8001728:	08001794 	.word	0x08001794
 800172c:	08001794 	.word	0x08001794
 8001730:	08001794 	.word	0x08001794
 8001734:	08001798 	.word	0x08001798

08001738 <memset>:
 8001738:	4603      	mov	r3, r0
 800173a:	4402      	add	r2, r0
 800173c:	4293      	cmp	r3, r2
 800173e:	d100      	bne.n	8001742 <memset+0xa>
 8001740:	4770      	bx	lr
 8001742:	f803 1b01 	strb.w	r1, [r3], #1
 8001746:	e7f9      	b.n	800173c <memset+0x4>

08001748 <_init>:
 8001748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800174a:	bf00      	nop
 800174c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800174e:	bc08      	pop	{r3}
 8001750:	469e      	mov	lr, r3
 8001752:	4770      	bx	lr

08001754 <_fini>:
 8001754:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001756:	bf00      	nop
 8001758:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800175a:	bc08      	pop	{r3}
 800175c:	469e      	mov	lr, r3
 800175e:	4770      	bx	lr
